{"version":3,"file":"static/js/397.72c8d7ce.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../node_modules/memoize-one/dist/memoize-one.esm.js","../node_modules/react-window/src/timer.js","../node_modules/react-window/src/domHelpers.js","../node_modules/react-window/src/createGridComponent.js","../node_modules/react-window/src/createListComponent.js","../node_modules/react-window/src/FixedSizeList.js","../node_modules/@dnd-kit/utilities/src/execution-context/canUseDOM.ts","../node_modules/@dnd-kit/utilities/src/type-guards/isWindow.ts","../node_modules/@dnd-kit/utilities/src/type-guards/isNode.ts","../node_modules/@dnd-kit/utilities/src/execution-context/getWindow.ts","../node_modules/@dnd-kit/utilities/src/type-guards/isDocument.ts","../node_modules/@dnd-kit/utilities/src/type-guards/isHTMLElement.ts","../node_modules/@dnd-kit/utilities/src/type-guards/isSVGElement.ts","../node_modules/@dnd-kit/utilities/src/execution-context/getOwnerDocument.ts","../node_modules/@dnd-kit/utilities/src/hooks/useIsomorphicLayoutEffect.ts","../node_modules/@dnd-kit/utilities/src/hooks/useEvent.ts","../node_modules/@dnd-kit/utilities/src/hooks/useLatestValue.ts","../node_modules/@dnd-kit/utilities/src/hooks/useLazyMemo.ts","../node_modules/@dnd-kit/utilities/src/hooks/useNodeRef.ts","../node_modules/@dnd-kit/utilities/src/hooks/usePrevious.ts","../node_modules/@dnd-kit/utilities/src/hooks/useUniqueId.ts","../node_modules/@dnd-kit/utilities/src/adjustment.ts","../node_modules/@dnd-kit/utilities/src/event/isKeyboardEvent.ts","../node_modules/@dnd-kit/utilities/src/coordinates/getEventCoordinates.ts","../node_modules/@dnd-kit/utilities/src/event/isTouchEvent.ts","../node_modules/@dnd-kit/utilities/src/event/hasViewportRelativeCoordinates.ts","../node_modules/@dnd-kit/utilities/src/focus/findFirstFocusableNode.ts","../node_modules/@dnd-kit/accessibility/src/components/HiddenText/HiddenText.tsx","../node_modules/@dnd-kit/accessibility/src/components/LiveRegion/LiveRegion.tsx","../node_modules/@dnd-kit/core/src/components/DndMonitor/context.ts","../node_modules/@dnd-kit/core/src/components/Accessibility/defaults.ts","../node_modules/@dnd-kit/core/src/components/Accessibility/Accessibility.tsx","../node_modules/@dnd-kit/accessibility/src/hooks/useAnnouncement.ts","../node_modules/@dnd-kit/core/src/components/DndMonitor/useDndMonitor.ts","../node_modules/@dnd-kit/core/src/store/actions.ts","../node_modules/@dnd-kit/core/src/utilities/other/noop.ts","../node_modules/@dnd-kit/core/src/utilities/coordinates/constants.ts","../node_modules/@dnd-kit/core/src/utilities/algorithms/helpers.ts","../node_modules/@dnd-kit/core/src/utilities/algorithms/rectIntersection.ts","../node_modules/@dnd-kit/core/src/utilities/rect/getRectDelta.ts","../node_modules/@dnd-kit/core/src/utilities/rect/rectAdjustment.ts","../node_modules/@dnd-kit/core/src/utilities/transform/parseTransform.ts","../node_modules/@dnd-kit/core/src/utilities/rect/getRect.ts","../node_modules/@dnd-kit/core/src/utilities/transform/inverseTransform.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollableAncestors.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/isScrollable.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/isFixed.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollableElement.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollCoordinates.ts","../node_modules/@dnd-kit/core/src/types/direction.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/documentScrollingElement.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollPosition.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollDirectionAndSpeed.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollElementRect.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/getScrollOffsets.ts","../node_modules/@dnd-kit/core/src/utilities/scroll/scrollIntoViewIfNeeded.ts","../node_modules/@dnd-kit/core/src/utilities/rect/Rect.ts","../node_modules/@dnd-kit/core/src/sensors/utilities/Listeners.ts","../node_modules/@dnd-kit/core/src/sensors/utilities/hasExceededDistance.ts","../node_modules/@dnd-kit/core/src/sensors/events.ts","../node_modules/@dnd-kit/core/src/sensors/keyboard/types.ts","../node_modules/@dnd-kit/core/src/sensors/keyboard/defaults.ts","../node_modules/@dnd-kit/core/src/sensors/keyboard/KeyboardSensor.ts","../node_modules/@dnd-kit/core/src/sensors/pointer/AbstractPointerSensor.ts","../node_modules/@dnd-kit/core/src/sensors/utilities/getEventListenerTarget.ts","../node_modules/@dnd-kit/core/src/sensors/pointer/PointerSensor.ts","../node_modules/@dnd-kit/core/src/sensors/mouse/MouseSensor.ts","../node_modules/@dnd-kit/core/src/sensors/touch/TouchSensor.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useAutoScroller.ts","../node_modules/@dnd-kit/utilities/src/hooks/useInterval.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useDroppableMeasuring.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useInitialValue.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useResizeObserver.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useRect.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useMutationObserver.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useScrollableAncestors.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useScrollOffsetsDelta.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useWindowRect.ts","../node_modules/@dnd-kit/core/src/utilities/rect/getWindowClientRect.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useRects.ts","../node_modules/@dnd-kit/core/src/utilities/nodes/getMeasurableNode.ts","../node_modules/@dnd-kit/core/src/components/DndContext/defaults.ts","../node_modules/@dnd-kit/core/src/store/constructors.ts","../node_modules/@dnd-kit/core/src/store/context.ts","../node_modules/@dnd-kit/core/src/store/reducer.ts","../node_modules/@dnd-kit/core/src/components/Accessibility/components/RestoreFocus.tsx","../node_modules/@dnd-kit/core/src/modifiers/applyModifiers.ts","../node_modules/@dnd-kit/core/src/components/DndContext/DndContext.tsx","../node_modules/@dnd-kit/core/src/components/DndMonitor/useDndMonitorProvider.tsx","../node_modules/@dnd-kit/core/src/components/DndContext/hooks/useMeasuringConfiguration.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useCachedNode.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useInitialRect.ts","../node_modules/@dnd-kit/core/src/components/DndContext/hooks/useLayoutShiftScrollCompensation.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useDragOverlayMeasuring.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useRectDelta.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useScrollOffsets.ts","../node_modules/@dnd-kit/core/src/utilities/rect/adjustScale.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useCombineActivators.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useSensorSetup.ts","../node_modules/@dnd-kit/core/src/hooks/useDraggable.ts","../node_modules/@dnd-kit/core/src/hooks/utilities/useSyntheticListeners.ts","../node_modules/@dnd-kit/core/src/hooks/useDroppable.ts"],"sourcesContent":["function _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nexport { _extends as default };","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nexport { _assertThisInitialized as default };","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inheritsLoose(t, o) {\n  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);\n}\nexport { _inheritsLoose as default };","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n            return lastResult;\n        }\n        lastResult = resultFn.apply(this, newArgs);\n        calledOnce = true;\n        lastThis = this;\n        lastArgs = newArgs;\n        return lastResult;\n    }\n    return memoized;\n}\n\nexport default memoizeOne;\n","// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount, layout } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n      let scrollbarSize = 0;\n      if (this._outerRef) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (layout === 'vertical') {\n          scrollbarSize =\n            outerRef.scrollWidth > outerRef.clientWidth\n              ? getScrollbarSize()\n              : 0;\n        } else {\n          scrollbarSize =\n            outerRef.scrollHeight > outerRef.clientHeight\n              ? getScrollbarSize()\n              : 0;\n        }\n      }\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps,\n          scrollbarSize\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\ntype InstanceProps = any;\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) -\n        size +\n        ((itemSize: any): number) +\n        scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nexport const canUseDOM =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined';\n","export function isWindow(element: Object): element is typeof window {\n  const elementString = Object.prototype.toString.call(element);\n  return (\n    elementString === '[object Window]' ||\n    // In Electron context the Window object serializes to [object global]\n    elementString === '[object global]'\n  );\n}\n","export function isNode(node: Object): node is Node {\n  return 'nodeType' in node;\n}\n","import {isWindow} from '../type-guards/isWindow';\nimport {isNode} from '../type-guards/isNode';\n\nexport function getWindow(target: Event['target']): typeof window {\n  if (!target) {\n    return window;\n  }\n\n  if (isWindow(target)) {\n    return target;\n  }\n\n  if (!isNode(target)) {\n    return window;\n  }\n\n  return target.ownerDocument?.defaultView ?? window;\n}\n","import {getWindow} from '../execution-context/getWindow';\n\nexport function isDocument(node: Node): node is Document {\n  const {Document} = getWindow(node);\n\n  return node instanceof Document;\n}\n","import {getWindow} from '../execution-context/getWindow';\n\nimport {isWindow} from './isWindow';\n\nexport function isHTMLElement(node: Node | Window): node is HTMLElement {\n  if (isWindow(node)) {\n    return false;\n  }\n\n  return node instanceof getWindow(node).HTMLElement;\n}\n","import {getWindow} from '../execution-context/getWindow';\n\nexport function isSVGElement(node: Node): node is SVGElement {\n  return node instanceof getWindow(node).SVGElement;\n}\n","import {\n  isWindow,\n  isHTMLElement,\n  isDocument,\n  isNode,\n  isSVGElement,\n} from '../type-guards';\n\nexport function getOwnerDocument(target: Event['target']): Document {\n  if (!target) {\n    return document;\n  }\n\n  if (isWindow(target)) {\n    return target.document;\n  }\n\n  if (!isNode(target)) {\n    return document;\n  }\n\n  if (isDocument(target)) {\n    return target;\n  }\n\n  if (isHTMLElement(target) || isSVGElement(target)) {\n    return target.ownerDocument;\n  }\n\n  return document;\n}\n","import {useEffect, useLayoutEffect} from 'react';\n\nimport {canUseDOM} from '../execution-context';\n\n/**\n * A hook that resolves to useEffect on the server and useLayoutEffect on the client\n * @param callback {function} Callback function that is invoked when the dependencies of the hook change\n */\nexport const useIsomorphicLayoutEffect = canUseDOM\n  ? useLayoutEffect\n  : useEffect;\n","import {useCallback, useRef} from 'react';\n\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect';\n\nexport function useEvent<T extends Function>(handler: T | undefined) {\n  const handlerRef = useRef<T | undefined>(handler);\n\n  useIsomorphicLayoutEffect(() => {\n    handlerRef.current = handler;\n  });\n\n  return useCallback(function (...args: any) {\n    return handlerRef.current?.(...args);\n  }, []);\n}\n","import {useRef} from 'react';\nimport type {DependencyList} from 'react';\n\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect';\n\nexport function useLatestValue<T extends any>(\n  value: T,\n  dependencies: DependencyList = [value]\n) {\n  const valueRef = useRef<T>(value);\n\n  useIsomorphicLayoutEffect(() => {\n    if (valueRef.current !== value) {\n      valueRef.current = value;\n    }\n  }, dependencies);\n\n  return valueRef;\n}\n","import {useMemo, useRef} from 'react';\n\nexport function useLazyMemo<T>(\n  callback: (prevValue: T | undefined) => T,\n  dependencies: any[]\n) {\n  const valueRef = useRef<T>();\n\n  return useMemo(\n    () => {\n      const newValue = callback(valueRef.current);\n      valueRef.current = newValue;\n\n      return newValue;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...dependencies]\n  );\n}\n","import {useRef, useCallback} from 'react';\n\nimport {useEvent} from './useEvent';\n\nexport function useNodeRef(\n  onChange?: (\n    newElement: HTMLElement | null,\n    previousElement: HTMLElement | null\n  ) => void\n) {\n  const onChangeHandler = useEvent(onChange);\n  const node = useRef<HTMLElement | null>(null);\n  const setNodeRef = useCallback(\n    (element: HTMLElement | null) => {\n      if (element !== node.current) {\n        onChangeHandler?.(element, node.current);\n      }\n\n      node.current = element;\n    },\n    //eslint-disable-next-line\n    []\n  );\n\n  return [node, setNodeRef] as const;\n}\n","import {useRef, useEffect} from 'react';\n\nexport function usePrevious<T>(value: T) {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n","import {useMemo} from 'react';\n\nlet ids: Record<string, number> = {};\n\nexport function useUniqueId(prefix: string, value?: string) {\n  return useMemo(() => {\n    if (value) {\n      return value;\n    }\n\n    const id = ids[prefix] == null ? 0 : ids[prefix] + 1;\n    ids[prefix] = id;\n\n    return `${prefix}-${id}`;\n  }, [prefix, value]);\n}\n","function createAdjustmentFn(modifier: number) {\n  return <T extends Record<U, number>, U extends string>(\n    object: T,\n    ...adjustments: Partial<T>[]\n  ): T => {\n    return adjustments.reduce<T>(\n      (accumulator, adjustment) => {\n        const entries = Object.entries(adjustment) as [U, number][];\n\n        for (const [key, valueAdjustment] of entries) {\n          const value = accumulator[key];\n\n          if (value != null) {\n            accumulator[key] = (value + modifier * valueAdjustment) as T[U];\n          }\n        }\n\n        return accumulator;\n      },\n      {\n        ...object,\n      }\n    );\n  };\n}\n\nexport const add = createAdjustmentFn(1);\nexport const subtract = createAdjustmentFn(-1);\n","import {getWindow} from '../execution-context';\n\nexport function isKeyboardEvent(\n  event: Event | undefined | null\n): event is KeyboardEvent {\n  if (!event) {\n    return false;\n  }\n\n  const {KeyboardEvent} = getWindow(event.target);\n\n  return KeyboardEvent && event instanceof KeyboardEvent;\n}\n","import type {Coordinates} from './types';\nimport {isTouchEvent, hasViewportRelativeCoordinates} from '../event';\n\n/**\n * Returns the normalized x and y coordinates for mouse and touch events.\n */\nexport function getEventCoordinates(event: Event): Coordinates | null {\n  if (isTouchEvent(event)) {\n    if (event.touches && event.touches.length) {\n      const {clientX: x, clientY: y} = event.touches[0];\n\n      return {\n        x,\n        y,\n      };\n    } else if (event.changedTouches && event.changedTouches.length) {\n      const {clientX: x, clientY: y} = event.changedTouches[0];\n\n      return {\n        x,\n        y,\n      };\n    }\n  }\n\n  if (hasViewportRelativeCoordinates(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  }\n\n  return null;\n}\n","import {getWindow} from '../execution-context';\n\nexport function isTouchEvent(\n  event: Event | undefined | null\n): event is TouchEvent {\n  if (!event) {\n    return false;\n  }\n\n  const {TouchEvent} = getWindow(event.target);\n\n  return TouchEvent && event instanceof TouchEvent;\n}\n","export function hasViewportRelativeCoordinates(\n  event: Event\n): event is Event & Pick<PointerEvent, 'clientX' | 'clientY'> {\n  return 'clientX' in event && 'clientY' in event;\n}\n","const SELECTOR =\n  'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]';\n\nexport function findFirstFocusableNode(\n  element: HTMLElement\n): HTMLElement | null {\n  if (element.matches(SELECTOR)) {\n    return element;\n  }\n\n  return element.querySelector(SELECTOR);\n}\n","import React from 'react';\n\ninterface Props {\n  id: string;\n  value: string;\n}\n\nconst hiddenStyles: React.CSSProperties = {\n  display: 'none',\n};\n\nexport function HiddenText({id, value}: Props) {\n  return (\n    <div id={id} style={hiddenStyles}>\n      {value}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport interface Props {\n  id: string;\n  announcement: string;\n  ariaLiveType?: \"polite\" | \"assertive\" | \"off\";\n}\n\nexport function LiveRegion({id, announcement, ariaLiveType = \"assertive\"}: Props) {\n  // Hide element visually but keep it readable by screen readers\n  const visuallyHidden: React.CSSProperties = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: 1,\n    height: 1,\n    margin: -1,\n    border: 0,\n    padding: 0,\n    overflow: 'hidden',\n    clip: 'rect(0 0 0 0)',\n    clipPath: 'inset(100%)',\n    whiteSpace: 'nowrap',\n  };\n  \n  return (\n    <div\n      id={id}\n      style={visuallyHidden}\n      role=\"status\"\n      aria-live={ariaLiveType}\n      aria-atomic\n    >\n      {announcement}\n    </div>\n  );\n}\n","import {createContext} from 'react';\n\nimport type {RegisterListener} from './types';\n\nexport const DndMonitorContext = createContext<RegisterListener | null>(null);\n","import type {Announcements, ScreenReaderInstructions} from './types';\n\nexport const defaultScreenReaderInstructions: ScreenReaderInstructions = {\n  draggable: `\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  `,\n};\n\nexport const defaultAnnouncements: Announcements = {\n  onDragStart({active}) {\n    return `Picked up draggable item ${active.id}.`;\n  },\n  onDragOver({active, over}) {\n    if (over) {\n      return `Draggable item ${active.id} was moved over droppable area ${over.id}.`;\n    }\n\n    return `Draggable item ${active.id} is no longer over a droppable area.`;\n  },\n  onDragEnd({active, over}) {\n    if (over) {\n      return `Draggable item ${active.id} was dropped over droppable area ${over.id}`;\n    }\n\n    return `Draggable item ${active.id} was dropped.`;\n  },\n  onDragCancel({active}) {\n    return `Dragging was cancelled. Draggable item ${active.id} was dropped.`;\n  },\n};\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {createPortal} from 'react-dom';\nimport {useUniqueId} from '@dnd-kit/utilities';\nimport {HiddenText, LiveRegion, useAnnouncement} from '@dnd-kit/accessibility';\n\nimport {DndMonitorListener, useDndMonitor} from '../DndMonitor';\n\nimport type {Announcements, ScreenReaderInstructions} from './types';\nimport {\n  defaultAnnouncements,\n  defaultScreenReaderInstructions,\n} from './defaults';\n\ninterface Props {\n  announcements?: Announcements;\n  container?: Element;\n  screenReaderInstructions?: ScreenReaderInstructions;\n  hiddenTextDescribedById: string;\n}\n\nexport function Accessibility({\n  announcements = defaultAnnouncements,\n  container,\n  hiddenTextDescribedById,\n  screenReaderInstructions = defaultScreenReaderInstructions,\n}: Props) {\n  const {announce, announcement} = useAnnouncement();\n  const liveRegionId = useUniqueId(`DndLiveRegion`);\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useDndMonitor(\n    useMemo<DndMonitorListener>(\n      () => ({\n        onDragStart({active}) {\n          announce(announcements.onDragStart({active}));\n        },\n        onDragMove({active, over}) {\n          if (announcements.onDragMove) {\n            announce(announcements.onDragMove({active, over}));\n          }\n        },\n        onDragOver({active, over}) {\n          announce(announcements.onDragOver({active, over}));\n        },\n        onDragEnd({active, over}) {\n          announce(announcements.onDragEnd({active, over}));\n        },\n        onDragCancel({active, over}) {\n          announce(announcements.onDragCancel({active, over}));\n        },\n      }),\n      [announce, announcements]\n    )\n  );\n\n  if (!mounted) {\n    return null;\n  }\n\n  const markup = (\n    <>\n      <HiddenText\n        id={hiddenTextDescribedById}\n        value={screenReaderInstructions.draggable}\n      />\n      <LiveRegion id={liveRegionId} announcement={announcement} />\n    </>\n  );\n\n  return container ? createPortal(markup, container) : markup;\n}\n","import {useCallback, useState} from 'react';\n\nexport function useAnnouncement() {\n  const [announcement, setAnnouncement] = useState('');\n  const announce = useCallback((value: string | undefined) => {\n    if (value != null) {\n      setAnnouncement(value);\n    }\n  }, []);\n\n  return {announce, announcement} as const;\n}\n","import {useContext, useEffect} from 'react';\n\nimport {DndMonitorContext} from './context';\nimport type {DndMonitorListener} from './types';\n\nexport function useDndMonitor(listener: DndMonitorListener) {\n  const registerListener = useContext(DndMonitorContext);\n\n  useEffect(() => {\n    if (!registerListener) {\n      throw new Error(\n        'useDndMonitor must be used within a children of <DndContext>'\n      );\n    }\n\n    const unsubscribe = registerListener(listener);\n\n    return unsubscribe;\n  }, [listener, registerListener]);\n}\n","import type {Coordinates, UniqueIdentifier} from '../types';\nimport type {DroppableContainer} from './types';\n\nexport enum Action {\n  DragStart = 'dragStart',\n  DragMove = 'dragMove',\n  DragEnd = 'dragEnd',\n  DragCancel = 'dragCancel',\n  DragOver = 'dragOver',\n  RegisterDroppable = 'registerDroppable',\n  SetDroppableDisabled = 'setDroppableDisabled',\n  UnregisterDroppable = 'unregisterDroppable',\n}\n\nexport type Actions =\n  | {\n      type: Action.DragStart;\n      active: UniqueIdentifier;\n      initialCoordinates: Coordinates;\n    }\n  | {type: Action.DragMove; coordinates: Coordinates}\n  | {type: Action.DragEnd}\n  | {type: Action.DragCancel}\n  | {\n      type: Action.RegisterDroppable;\n      element: DroppableContainer;\n    }\n  | {\n      type: Action.SetDroppableDisabled;\n      id: UniqueIdentifier;\n      key: UniqueIdentifier;\n      disabled: boolean;\n    }\n  | {\n      type: Action.UnregisterDroppable;\n      id: UniqueIdentifier;\n      key: UniqueIdentifier;\n    };\n","export function noop(..._args: any) {}\n","import type {Coordinates} from '../../types';\n\nexport const defaultCoordinates: Coordinates = Object.freeze({\n  x: 0,\n  y: 0,\n});\n","/* eslint-disable no-redeclare */\nimport type {ClientRect} from '../../types';\n\nimport type {Collision, CollisionDescriptor} from './types';\n\n/**\n * Sort collisions from smallest to greatest value\n */\nexport function sortCollisionsAsc(\n  {data: {value: a}}: CollisionDescriptor,\n  {data: {value: b}}: CollisionDescriptor\n) {\n  return a - b;\n}\n\n/**\n * Sort collisions from greatest to smallest value\n */\nexport function sortCollisionsDesc(\n  {data: {value: a}}: CollisionDescriptor,\n  {data: {value: b}}: CollisionDescriptor\n) {\n  return b - a;\n}\n\n/**\n * Returns the coordinates of the corners of a given rectangle:\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\n */\nexport function cornersOfRectangle({left, top, height, width}: ClientRect) {\n  return [\n    {\n      x: left,\n      y: top,\n    },\n    {\n      x: left + width,\n      y: top,\n    },\n    {\n      x: left,\n      y: top + height,\n    },\n    {\n      x: left + width,\n      y: top + height,\n    },\n  ];\n}\n\n/**\n * Returns the first collision, or null if there isn't one.\n * If a property is specified, returns the specified property of the first collision.\n */\nexport function getFirstCollision(\n  collisions: Collision[] | null | undefined\n): Collision | null;\nexport function getFirstCollision<T extends keyof Collision>(\n  collisions: Collision[] | null | undefined,\n  property: T\n): Collision[T] | null;\nexport function getFirstCollision(\n  collisions: Collision[] | null | undefined,\n  property?: keyof Collision\n) {\n  if (!collisions || collisions.length === 0) {\n    return null;\n  }\n\n  const [firstCollision] = collisions;\n\n  return property ? firstCollision[property] : firstCollision;\n}\n","import type {ClientRect} from '../../types';\n\nimport type {CollisionDescriptor, CollisionDetection} from './types';\nimport {sortCollisionsDesc} from './helpers';\n\n/**\n * Returns the intersecting rectangle area between two rectangles\n */\nexport function getIntersectionRatio(\n  entry: ClientRect,\n  target: ClientRect\n): number {\n  const top = Math.max(target.top, entry.top);\n  const left = Math.max(target.left, entry.left);\n  const right = Math.min(target.left + target.width, entry.left + entry.width);\n  const bottom = Math.min(target.top + target.height, entry.top + entry.height);\n  const width = right - left;\n  const height = bottom - top;\n\n  if (left < right && top < bottom) {\n    const targetArea = target.width * target.height;\n    const entryArea = entry.width * entry.height;\n    const intersectionArea = width * height;\n    const intersectionRatio =\n      intersectionArea / (targetArea + entryArea - intersectionArea);\n\n    return Number(intersectionRatio.toFixed(4));\n  }\n\n  // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n  return 0;\n}\n\n/**\n * Returns the rectangles that has the greatest intersection area with a given\n * rectangle in an array of rectangles.\n */\nexport const rectIntersection: CollisionDetection = ({\n  collisionRect,\n  droppableRects,\n  droppableContainers,\n}) => {\n  const collisions: CollisionDescriptor[] = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {id} = droppableContainer;\n    const rect = droppableRects.get(id);\n\n    if (rect) {\n      const intersectionRatio = getIntersectionRatio(rect, collisionRect);\n\n      if (intersectionRatio > 0) {\n        collisions.push({\n          id,\n          data: {droppableContainer, value: intersectionRatio},\n        });\n      }\n    }\n  }\n\n  return collisions.sort(sortCollisionsDesc);\n};\n","import type {Coordinates, ClientRect} from '../../types';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getRectDelta(\n  rect1: ClientRect | null,\n  rect2: ClientRect | null\n): Coordinates {\n  return rect1 && rect2\n    ? {\n        x: rect1.left - rect2.left,\n        y: rect1.top - rect2.top,\n      }\n    : defaultCoordinates;\n}\n","import type {Coordinates, ClientRect} from '../../types';\n\nexport function createRectAdjustmentFn(modifier: number) {\n  return function adjustClientRect(\n    rect: ClientRect,\n    ...adjustments: Coordinates[]\n  ): ClientRect {\n    return adjustments.reduce<ClientRect>(\n      (acc, adjustment) => ({\n        ...acc,\n        top: acc.top + modifier * adjustment.y,\n        bottom: acc.bottom + modifier * adjustment.y,\n        left: acc.left + modifier * adjustment.x,\n        right: acc.right + modifier * adjustment.x,\n      }),\n      {...rect}\n    );\n  };\n}\n\nexport const getAdjustedRect = createRectAdjustmentFn(1);\n","import type {Transform} from '@dnd-kit/utilities';\n\nexport function parseTransform(transform: string): Transform | null {\n  if (transform.startsWith('matrix3d(')) {\n    const transformArray = transform.slice(9, -1).split(/, /);\n\n    return {\n      x: +transformArray[12],\n      y: +transformArray[13],\n      scaleX: +transformArray[0],\n      scaleY: +transformArray[5],\n    };\n  } else if (transform.startsWith('matrix(')) {\n    const transformArray = transform.slice(7, -1).split(/, /);\n\n    return {\n      x: +transformArray[4],\n      y: +transformArray[5],\n      scaleX: +transformArray[0],\n      scaleY: +transformArray[3],\n    };\n  }\n\n  return null;\n}\n","import {getWindow} from '@dnd-kit/utilities';\n\nimport type {ClientRect} from '../../types';\nimport {inverseTransform} from '../transform';\n\ninterface Options {\n  ignoreTransform?: boolean;\n}\n\nconst defaultOptions: Options = {ignoreTransform: false};\n\n/**\n * Returns the bounding client rect of an element relative to the viewport.\n */\nexport function getClientRect(\n  element: Element,\n  options: Options = defaultOptions\n) {\n  let rect: ClientRect = element.getBoundingClientRect();\n\n  if (options.ignoreTransform) {\n    const {transform, transformOrigin} =\n      getWindow(element).getComputedStyle(element);\n\n    if (transform) {\n      rect = inverseTransform(rect, transform, transformOrigin);\n    }\n  }\n\n  const {top, left, width, height, bottom, right} = rect;\n\n  return {\n    top,\n    left,\n    width,\n    height,\n    bottom,\n    right,\n  };\n}\n\n/**\n * Returns the bounding client rect of an element relative to the viewport.\n *\n * @remarks\n * The ClientRect returned by this method does not take into account transforms\n * applied to the element it measures.\n *\n */\nexport function getTransformAgnosticClientRect(element: Element): ClientRect {\n  return getClientRect(element, {ignoreTransform: true});\n}\n","import type {ClientRect} from '../../types';\n\nimport {parseTransform} from './parseTransform';\n\nexport function inverseTransform(\n  rect: ClientRect,\n  transform: string,\n  transformOrigin: string\n): ClientRect {\n  const parsedTransform = parseTransform(transform);\n\n  if (!parsedTransform) {\n    return rect;\n  }\n\n  const {scaleX, scaleY, x: translateX, y: translateY} = parsedTransform;\n\n  const x = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);\n  const y =\n    rect.top -\n    translateY -\n    (1 - scaleY) *\n      parseFloat(transformOrigin.slice(transformOrigin.indexOf(' ') + 1));\n  const w = scaleX ? rect.width / scaleX : rect.width;\n  const h = scaleY ? rect.height / scaleY : rect.height;\n\n  return {\n    width: w,\n    height: h,\n    top: y,\n    right: x + w,\n    bottom: y + h,\n    left: x,\n  };\n}\n","import {\n  getWindow,\n  isDocument,\n  isHTMLElement,\n  isSVGElement,\n} from '@dnd-kit/utilities';\n\nimport {isFixed} from './isFixed';\nimport {isScrollable} from './isScrollable';\n\nexport function getScrollableAncestors(\n  element: Node | null,\n  limit?: number\n): Element[] {\n  const scrollParents: Element[] = [];\n\n  function findScrollableAncestors(node: Node | null): Element[] {\n    if (limit != null && scrollParents.length >= limit) {\n      return scrollParents;\n    }\n\n    if (!node) {\n      return scrollParents;\n    }\n\n    if (\n      isDocument(node) &&\n      node.scrollingElement != null &&\n      !scrollParents.includes(node.scrollingElement)\n    ) {\n      scrollParents.push(node.scrollingElement);\n\n      return scrollParents;\n    }\n\n    if (!isHTMLElement(node) || isSVGElement(node)) {\n      return scrollParents;\n    }\n\n    if (scrollParents.includes(node)) {\n      return scrollParents;\n    }\n\n    const computedStyle = getWindow(element).getComputedStyle(node);\n\n    if (node !== element) {\n      if (isScrollable(node, computedStyle)) {\n        scrollParents.push(node);\n      }\n    }\n\n    if (isFixed(node, computedStyle)) {\n      return scrollParents;\n    }\n\n    return findScrollableAncestors(node.parentNode);\n  }\n\n  if (!element) {\n    return scrollParents;\n  }\n\n  return findScrollableAncestors(element);\n}\n\nexport function getFirstScrollableAncestor(node: Node | null): Element | null {\n  const [firstScrollableAncestor] = getScrollableAncestors(node, 1);\n\n  return firstScrollableAncestor ?? null;\n}\n","import {getWindow} from '@dnd-kit/utilities';\n\nexport function isScrollable(\n  element: HTMLElement,\n  computedStyle: CSSStyleDeclaration = getWindow(element).getComputedStyle(\n    element\n  )\n): boolean {\n  const overflowRegex = /(auto|scroll|overlay)/;\n  const properties = ['overflow', 'overflowX', 'overflowY'];\n\n  return properties.some((property) => {\n    const value = computedStyle[property as keyof CSSStyleDeclaration];\n\n    return typeof value === 'string' ? overflowRegex.test(value) : false;\n  });\n}\n","import {getWindow} from '@dnd-kit/utilities';\n\nexport function isFixed(\n  node: HTMLElement,\n  computedStyle: CSSStyleDeclaration = getWindow(node).getComputedStyle(node)\n): boolean {\n  return computedStyle.position === 'fixed';\n}\n","import {\n  canUseDOM,\n  isHTMLElement,\n  isDocument,\n  getOwnerDocument,\n  isNode,\n  isWindow,\n} from '@dnd-kit/utilities';\n\nexport function getScrollableElement(element: EventTarget | null) {\n  if (!canUseDOM || !element) {\n    return null;\n  }\n\n  if (isWindow(element)) {\n    return element;\n  }\n\n  if (!isNode(element)) {\n    return null;\n  }\n\n  if (\n    isDocument(element) ||\n    element === getOwnerDocument(element).scrollingElement\n  ) {\n    return window;\n  }\n\n  if (isHTMLElement(element)) {\n    return element;\n  }\n\n  return null;\n}\n","import {isWindow} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\n\nexport function getScrollXCoordinate(element: Element | typeof window): number {\n  if (isWindow(element)) {\n    return element.scrollX;\n  }\n\n  return element.scrollLeft;\n}\n\nexport function getScrollYCoordinate(element: Element | typeof window): number {\n  if (isWindow(element)) {\n    return element.scrollY;\n  }\n\n  return element.scrollTop;\n}\n\nexport function getScrollCoordinates(\n  element: Element | typeof window\n): Coordinates {\n  return {\n    x: getScrollXCoordinate(element),\n    y: getScrollYCoordinate(element),\n  };\n}\n","export enum Direction {\n  Forward = 1,\n  Backward = -1,\n}\n","import {canUseDOM} from '@dnd-kit/utilities';\n\nexport function isDocumentScrollingElement(element: Element | null) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n\n  return element === document.scrollingElement;\n}\n","import {isDocumentScrollingElement} from './documentScrollingElement';\n\nexport function getScrollPosition(scrollingContainer: Element) {\n  const minScroll = {\n    x: 0,\n    y: 0,\n  };\n  const dimensions = isDocumentScrollingElement(scrollingContainer)\n    ? {\n        height: window.innerHeight,\n        width: window.innerWidth,\n      }\n    : {\n        height: scrollingContainer.clientHeight,\n        width: scrollingContainer.clientWidth,\n      };\n  const maxScroll = {\n    x: scrollingContainer.scrollWidth - dimensions.width,\n    y: scrollingContainer.scrollHeight - dimensions.height,\n  };\n\n  const isTop = scrollingContainer.scrollTop <= minScroll.y;\n  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n\n  return {\n    isTop,\n    isLeft,\n    isBottom,\n    isRight,\n    maxScroll,\n    minScroll,\n  };\n}\n","import {Direction, ClientRect} from '../../types';\nimport {getScrollPosition} from './getScrollPosition';\n\ninterface PositionalCoordinates\n  extends Pick<ClientRect, 'top' | 'left' | 'right' | 'bottom'> {}\n\nconst defaultThreshold = {\n  x: 0.2,\n  y: 0.2,\n};\n\nexport function getScrollDirectionAndSpeed(\n  scrollContainer: Element,\n  scrollContainerRect: ClientRect,\n  {top, left, right, bottom}: PositionalCoordinates,\n  acceleration = 10,\n  thresholdPercentage = defaultThreshold\n) {\n  const {isTop, isBottom, isLeft, isRight} = getScrollPosition(scrollContainer);\n\n  const direction = {\n    x: 0,\n    y: 0,\n  };\n  const speed = {\n    x: 0,\n    y: 0,\n  };\n  const threshold = {\n    height: scrollContainerRect.height * thresholdPercentage.y,\n    width: scrollContainerRect.width * thresholdPercentage.x,\n  };\n\n  if (!isTop && top <= scrollContainerRect.top + threshold.height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.top + threshold.height - top) / threshold.height\n      );\n  } else if (\n    !isBottom &&\n    bottom >= scrollContainerRect.bottom - threshold.height\n  ) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.bottom - threshold.height - bottom) /\n          threshold.height\n      );\n  }\n\n  if (!isRight && right >= scrollContainerRect.right - threshold.width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.right - threshold.width - right) / threshold.width\n      );\n  } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.left + threshold.width - left) / threshold.width\n      );\n  }\n\n  return {\n    direction,\n    speed,\n  };\n}\n","export function getScrollElementRect(element: Element) {\n  if (element === document.scrollingElement) {\n    const {innerWidth, innerHeight} = window;\n\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight,\n    };\n  }\n\n  const {top, left, right, bottom} = element.getBoundingClientRect();\n\n  return {\n    top,\n    left,\n    right,\n    bottom,\n    width: element.clientWidth,\n    height: element.clientHeight,\n  };\n}\n","import {add} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\nimport {\n  getScrollCoordinates,\n  getScrollXCoordinate,\n  getScrollYCoordinate,\n} from './getScrollCoordinates';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getScrollOffsets(scrollableAncestors: Element[]): Coordinates {\n  return scrollableAncestors.reduce<Coordinates>((acc, node) => {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\n\nexport function getScrollXOffset(scrollableAncestors: Element[]): number {\n  return scrollableAncestors.reduce<number>((acc, node) => {\n    return acc + getScrollXCoordinate(node);\n  }, 0);\n}\n\nexport function getScrollYOffset(scrollableAncestors: Element[]): number {\n  return scrollableAncestors.reduce<number>((acc, node) => {\n    return acc + getScrollYCoordinate(node);\n  }, 0);\n}\n","import type {ClientRect} from '../../types';\nimport {getClientRect} from '../rect/getRect';\nimport {getFirstScrollableAncestor} from './getScrollableAncestors';\n\nexport function scrollIntoViewIfNeeded(\n  element: HTMLElement | null | undefined,\n  measure: (node: HTMLElement) => ClientRect = getClientRect\n) {\n  if (!element) {\n    return;\n  }\n\n  const {top, left, bottom, right} = measure(element);\n  const firstScrollableAncestor = getFirstScrollableAncestor(element);\n\n  if (!firstScrollableAncestor) {\n    return;\n  }\n\n  if (\n    bottom <= 0 ||\n    right <= 0 ||\n    top >= window.innerHeight ||\n    left >= window.innerWidth\n  ) {\n    element.scrollIntoView({\n      block: 'center',\n      inline: 'center',\n    });\n  }\n}\n","import type {ClientRect} from '../../types/rect';\nimport {\n  getScrollableAncestors,\n  getScrollOffsets,\n  getScrollXOffset,\n  getScrollYOffset,\n} from '../scroll';\n\nconst properties = [\n  ['x', ['left', 'right'], getScrollXOffset],\n  ['y', ['top', 'bottom'], getScrollYOffset],\n] as const;\n\nexport class Rect {\n  constructor(rect: ClientRect, element: Element) {\n    const scrollableAncestors = getScrollableAncestors(element);\n    const scrollOffsets = getScrollOffsets(scrollableAncestors);\n\n    this.rect = {...rect};\n    this.width = rect.width;\n    this.height = rect.height;\n\n    for (const [axis, keys, getScrollOffset] of properties) {\n      for (const key of keys) {\n        Object.defineProperty(this, key, {\n          get: () => {\n            const currentOffsets = getScrollOffset(scrollableAncestors);\n            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;\n\n            return this.rect[key] + scrollOffsetsDeltla;\n          },\n          enumerable: true,\n        });\n      }\n    }\n\n    Object.defineProperty(this, 'rect', {enumerable: false});\n  }\n\n  private rect: ClientRect;\n\n  public width: number;\n\n  public height: number;\n\n  // The below properties are set by the `Object.defineProperty` calls in the constructor\n  // @ts-ignore\n  public top: number;\n  // @ts-ignore\n  public bottom: number;\n  // @ts-ignore\n  public right: number;\n  // @ts-ignore\n  public left: number;\n}\n","export class Listeners {\n  private listeners: [\n    string,\n    EventListenerOrEventListenerObject,\n    AddEventListenerOptions | boolean | undefined\n  ][] = [];\n\n  constructor(private target: EventTarget | null) {}\n\n  public add<T extends Event>(\n    eventName: string,\n    handler: (event: T) => void,\n    options?: AddEventListenerOptions | boolean\n  ) {\n    this.target?.addEventListener(eventName, handler as EventListener, options);\n    this.listeners.push([eventName, handler as EventListener, options]);\n  }\n\n  public removeAll = () => {\n    this.listeners.forEach((listener) =>\n      this.target?.removeEventListener(...listener)\n    );\n  };\n}\n","import type {Coordinates, DistanceMeasurement} from '../../types';\n\nexport function hasExceededDistance(\n  delta: Coordinates,\n  measurement: DistanceMeasurement\n): boolean {\n  const dx = Math.abs(delta.x);\n  const dy = Math.abs(delta.y);\n\n  if (typeof measurement === 'number') {\n    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;\n  }\n\n  if ('x' in measurement && 'y' in measurement) {\n    return dx > measurement.x && dy > measurement.y;\n  }\n\n  if ('x' in measurement) {\n    return dx > measurement.x;\n  }\n\n  if ('y' in measurement) {\n    return dy > measurement.y;\n  }\n\n  return false;\n}\n","export enum EventName {\n  Click = 'click',\n  DragStart = 'dragstart',\n  Keydown = 'keydown',\n  ContextMenu = 'contextmenu',\n  Resize = 'resize',\n  SelectionChange = 'selectionchange',\n  VisibilityChange = 'visibilitychange',\n}\n\nexport function preventDefault(event: Event) {\n  event.preventDefault();\n}\n\nexport function stopPropagation(event: Event) {\n  event.stopPropagation();\n}\n","import type {Coordinates, UniqueIdentifier} from '../../types';\nimport type {SensorContext} from '../types';\n\nexport enum KeyboardCode {\n  Space = 'Space',\n  Down = 'ArrowDown',\n  Right = 'ArrowRight',\n  Left = 'ArrowLeft',\n  Up = 'ArrowUp',\n  Esc = 'Escape',\n  Enter = 'Enter',\n  Tab = 'Tab',\n}\n\nexport type KeyboardCodes = {\n  start: KeyboardEvent['code'][];\n  cancel: KeyboardEvent['code'][];\n  end: KeyboardEvent['code'][];\n};\n\nexport type KeyboardCoordinateGetter = (\n  event: KeyboardEvent,\n  args: {\n    active: UniqueIdentifier;\n    currentCoordinates: Coordinates;\n    context: SensorContext;\n  }\n) => Coordinates | void;\n","import {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\n\nexport const defaultKeyboardCodes: KeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter, KeyboardCode.Tab],\n};\n\nexport const defaultKeyboardCoordinateGetter: KeyboardCoordinateGetter = (\n  event,\n  {currentCoordinates}\n) => {\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x + 25,\n      };\n    case KeyboardCode.Left:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x - 25,\n      };\n    case KeyboardCode.Down:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y + 25,\n      };\n    case KeyboardCode.Up:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y - 25,\n      };\n  }\n\n  return undefined;\n};\n","import {\n  add as getAdjustedCoordinates,\n  subtract as getCoordinatesDelta,\n  getOwnerDocument,\n  getWindow,\n  isKeyboardEvent,\n} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\nimport {\n  defaultCoordinates,\n  getScrollPosition,\n  getScrollElementRect,\n} from '../../utilities';\nimport {scrollIntoViewIfNeeded} from '../../utilities/scroll';\nimport {EventName} from '../events';\nimport {Listeners} from '../utilities';\nimport type {\n  Activators,\n  SensorInstance,\n  SensorProps,\n  SensorOptions,\n} from '../types';\n\nimport {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\nimport {\n  defaultKeyboardCodes,\n  defaultKeyboardCoordinateGetter,\n} from './defaults';\n\nexport interface KeyboardSensorOptions extends SensorOptions {\n  keyboardCodes?: KeyboardCodes;\n  coordinateGetter?: KeyboardCoordinateGetter;\n  scrollBehavior?: ScrollBehavior;\n  onActivation?({event}: {event: KeyboardEvent}): void;\n}\n\nexport type KeyboardSensorProps = SensorProps<KeyboardSensorOptions>;\n\nexport class KeyboardSensor implements SensorInstance {\n  public autoScrollEnabled = false;\n  private referenceCoordinates: Coordinates | undefined;\n  private listeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(private props: KeyboardSensorProps) {\n    const {\n      event: {target},\n    } = props;\n\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    this.handleStart();\n\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n\n    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));\n  }\n\n  private handleStart() {\n    const {activeNode, onStart} = this.props;\n    const node = activeNode.node.current;\n\n    if (node) {\n      scrollIntoViewIfNeeded(node);\n    }\n\n    onStart(defaultCoordinates);\n  }\n\n  private handleKeyDown(event: Event) {\n    if (isKeyboardEvent(event)) {\n      const {active, context, options} = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter = defaultKeyboardCoordinateGetter,\n        scrollBehavior = 'smooth',\n      } = options;\n      const {code} = event;\n\n      if (keyboardCodes.end.includes(code)) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.includes(code)) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const {collisionRect} = context.current;\n      const currentCoordinates = collisionRect\n        ? {x: collisionRect.left, y: collisionRect.top}\n        : defaultCoordinates;\n\n      if (!this.referenceCoordinates) {\n        this.referenceCoordinates = currentCoordinates;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates,\n      });\n\n      if (newCoordinates) {\n        const coordinatesDelta = getCoordinatesDelta(\n          newCoordinates,\n          currentCoordinates\n        );\n        const scrollDelta = {\n          x: 0,\n          y: 0,\n        };\n        const {scrollableAncestors} = context.current;\n\n        for (const scrollContainer of scrollableAncestors) {\n          const direction = event.code;\n          const {isTop, isRight, isLeft, isBottom, maxScroll, minScroll} =\n            getScrollPosition(scrollContainer);\n          const scrollElementRect = getScrollElementRect(scrollContainer);\n\n          const clampedCoordinates = {\n            x: Math.min(\n              direction === KeyboardCode.Right\n                ? scrollElementRect.right - scrollElementRect.width / 2\n                : scrollElementRect.right,\n              Math.max(\n                direction === KeyboardCode.Right\n                  ? scrollElementRect.left\n                  : scrollElementRect.left + scrollElementRect.width / 2,\n                newCoordinates.x\n              )\n            ),\n            y: Math.min(\n              direction === KeyboardCode.Down\n                ? scrollElementRect.bottom - scrollElementRect.height / 2\n                : scrollElementRect.bottom,\n              Math.max(\n                direction === KeyboardCode.Down\n                  ? scrollElementRect.top\n                  : scrollElementRect.top + scrollElementRect.height / 2,\n                newCoordinates.y\n              )\n            ),\n          };\n\n          const canScrollX =\n            (direction === KeyboardCode.Right && !isRight) ||\n            (direction === KeyboardCode.Left && !isLeft);\n          const canScrollY =\n            (direction === KeyboardCode.Down && !isBottom) ||\n            (direction === KeyboardCode.Up && !isTop);\n\n          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n            const newScrollCoordinates =\n              scrollContainer.scrollLeft + coordinatesDelta.x;\n            const canScrollToNewCoordinates =\n              (direction === KeyboardCode.Right &&\n                newScrollCoordinates <= maxScroll.x) ||\n              (direction === KeyboardCode.Left &&\n                newScrollCoordinates >= minScroll.x);\n\n            if (canScrollToNewCoordinates && !coordinatesDelta.y) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollTo({\n                left: newScrollCoordinates,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            if (canScrollToNewCoordinates) {\n              scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;\n            } else {\n              scrollDelta.x =\n                direction === KeyboardCode.Right\n                  ? scrollContainer.scrollLeft - maxScroll.x\n                  : scrollContainer.scrollLeft - minScroll.x;\n            }\n\n            if (scrollDelta.x) {\n              scrollContainer.scrollBy({\n                left: -scrollDelta.x,\n                behavior: scrollBehavior,\n              });\n            }\n            break;\n          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n            const newScrollCoordinates =\n              scrollContainer.scrollTop + coordinatesDelta.y;\n            const canScrollToNewCoordinates =\n              (direction === KeyboardCode.Down &&\n                newScrollCoordinates <= maxScroll.y) ||\n              (direction === KeyboardCode.Up &&\n                newScrollCoordinates >= minScroll.y);\n\n            if (canScrollToNewCoordinates && !coordinatesDelta.x) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollTo({\n                top: newScrollCoordinates,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            if (canScrollToNewCoordinates) {\n              scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;\n            } else {\n              scrollDelta.y =\n                direction === KeyboardCode.Down\n                  ? scrollContainer.scrollTop - maxScroll.y\n                  : scrollContainer.scrollTop - minScroll.y;\n            }\n\n            if (scrollDelta.y) {\n              scrollContainer.scrollBy({\n                top: -scrollDelta.y,\n                behavior: scrollBehavior,\n              });\n            }\n\n            break;\n          }\n        }\n\n        this.handleMove(\n          event,\n          getAdjustedCoordinates(\n            getCoordinatesDelta(newCoordinates, this.referenceCoordinates),\n            scrollDelta\n          )\n        );\n      }\n    }\n  }\n\n  private handleMove(event: Event, coordinates: Coordinates) {\n    const {onMove} = this.props;\n\n    event.preventDefault();\n    onMove(coordinates);\n  }\n\n  private handleEnd(event: Event) {\n    const {onEnd} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel(event: Event) {\n    const {onCancel} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onCancel();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n  static activators: Activators<KeyboardSensorOptions> = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: (\n        event: React.KeyboardEvent,\n        {keyboardCodes = defaultKeyboardCodes, onActivation},\n        {active}\n      ) => {\n        const {code} = event.nativeEvent;\n\n        if (keyboardCodes.start.includes(code)) {\n          const activator = active.activatorNode.current;\n\n          if (activator && event.target !== activator) {\n            return false;\n          }\n\n          event.preventDefault();\n\n          onActivation?.({event: event.nativeEvent});\n\n          return true;\n        }\n\n        return false;\n      },\n    },\n  ];\n}\n","import {\n  subtract as getCoordinatesDelta,\n  getEventCoordinates,\n  getOwnerDocument,\n  getWindow,\n} from '@dnd-kit/utilities';\n\nimport {defaultCoordinates} from '../../utilities';\nimport {\n  getEventListenerTarget,\n  hasExceededDistance,\n  Listeners,\n} from '../utilities';\nimport {EventName, preventDefault, stopPropagation} from '../events';\nimport {KeyboardCode} from '../keyboard';\nimport type {SensorInstance, SensorProps, SensorOptions} from '../types';\nimport type {Coordinates, DistanceMeasurement} from '../../types';\n\ninterface DistanceConstraint {\n  distance: DistanceMeasurement;\n  tolerance?: DistanceMeasurement;\n}\n\ninterface DelayConstraint {\n  delay: number;\n  tolerance: DistanceMeasurement;\n}\n\ninterface EventDescriptor {\n  name: keyof DocumentEventMap;\n  passive?: boolean;\n}\n\nexport interface PointerEventHandlers {\n  cancel?: EventDescriptor;\n  move: EventDescriptor;\n  end: EventDescriptor;\n}\n\nexport type PointerActivationConstraint =\n  | DelayConstraint\n  | DistanceConstraint\n  | (DelayConstraint & DistanceConstraint);\n\nfunction isDistanceConstraint(\n  constraint: PointerActivationConstraint\n): constraint is PointerActivationConstraint & DistanceConstraint {\n  return Boolean(constraint && 'distance' in constraint);\n}\n\nfunction isDelayConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DelayConstraint {\n  return Boolean(constraint && 'delay' in constraint);\n}\n\nexport interface AbstractPointerSensorOptions extends SensorOptions {\n  activationConstraint?: PointerActivationConstraint;\n  bypassActivationConstraint?(\n    props: Pick<AbstractPointerSensorProps, 'activeNode' | 'event' | 'options'>\n  ): boolean;\n  onActivation?({event}: {event: Event}): void;\n}\n\nexport type AbstractPointerSensorProps =\n  SensorProps<AbstractPointerSensorOptions>;\n\nexport class AbstractPointerSensor implements SensorInstance {\n  public autoScrollEnabled = true;\n  private document: Document;\n  private activated: boolean = false;\n  private initialCoordinates: Coordinates;\n  private timeoutId: NodeJS.Timeout | null = null;\n  private listeners: Listeners;\n  private documentListeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(\n    private props: AbstractPointerSensorProps,\n    private events: PointerEventHandlers,\n    listenerTarget = getEventListenerTarget(props.event.target)\n  ) {\n    const {event} = props;\n    const {target} = event;\n\n    this.props = props;\n    this.events = events;\n    this.document = getOwnerDocument(target);\n    this.documentListeners = new Listeners(this.document);\n    this.listeners = new Listeners(listenerTarget);\n    this.windowListeners = new Listeners(getWindow(target));\n    this.initialCoordinates = getEventCoordinates(event) ?? defaultCoordinates;\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.removeTextSelection = this.removeTextSelection.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    const {\n      events,\n      props: {\n        options: {activationConstraint, bypassActivationConstraint},\n      },\n    } = this;\n\n    this.listeners.add(events.move.name, this.handleMove, {passive: false});\n    this.listeners.add(events.end.name, this.handleEnd);\n\n    if (events.cancel) {\n      this.listeners.add(events.cancel.name, this.handleCancel);\n    }\n\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.DragStart, preventDefault);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n    this.windowListeners.add(EventName.ContextMenu, preventDefault);\n    this.documentListeners.add(EventName.Keydown, this.handleKeydown);\n\n    if (activationConstraint) {\n      if (\n        bypassActivationConstraint?.({\n          event: this.props.event,\n          activeNode: this.props.activeNode,\n          options: this.props.options,\n        })\n      ) {\n        return this.handleStart();\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        this.timeoutId = setTimeout(\n          this.handleStart,\n          activationConstraint.delay\n        );\n        this.handlePending(activationConstraint);\n        return;\n      }\n\n      if (isDistanceConstraint(activationConstraint)) {\n        this.handlePending(activationConstraint);\n        return;\n      }\n    }\n\n    this.handleStart();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n\n    // Wait until the next event loop before removing document listeners\n    // This is necessary because we listen for `click` and `selection` events on the document\n    setTimeout(this.documentListeners.removeAll, 50);\n\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  private handlePending(\n    constraint: PointerActivationConstraint,\n    offset?: Coordinates | undefined\n  ): void {\n    const {active, onPending} = this.props;\n    onPending(active, constraint, this.initialCoordinates, offset);\n  }\n\n  private handleStart() {\n    const {initialCoordinates} = this;\n    const {onStart} = this.props;\n\n    if (initialCoordinates) {\n      this.activated = true;\n\n      // Stop propagation of click events once activation constraints are met\n      this.documentListeners.add(EventName.Click, stopPropagation, {\n        capture: true,\n      });\n\n      // Remove any text selection from the document\n      this.removeTextSelection();\n\n      // Prevent further text selection while dragging\n      this.documentListeners.add(\n        EventName.SelectionChange,\n        this.removeTextSelection\n      );\n\n      onStart(initialCoordinates);\n    }\n  }\n\n  private handleMove(event: Event) {\n    const {activated, initialCoordinates, props} = this;\n    const {\n      onMove,\n      options: {activationConstraint},\n    } = props;\n\n    if (!initialCoordinates) {\n      return;\n    }\n\n    const coordinates = getEventCoordinates(event) ?? defaultCoordinates;\n    const delta = getCoordinatesDelta(initialCoordinates, coordinates);\n\n    // Constraint validation\n    if (!activated && activationConstraint) {\n      if (isDistanceConstraint(activationConstraint)) {\n        if (\n          activationConstraint.tolerance != null &&\n          hasExceededDistance(delta, activationConstraint.tolerance)\n        ) {\n          return this.handleCancel();\n        }\n\n        if (hasExceededDistance(delta, activationConstraint.distance)) {\n          return this.handleStart();\n        }\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n          return this.handleCancel();\n        }\n      }\n\n      this.handlePending(activationConstraint, delta);\n      return;\n    }\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    onMove(coordinates);\n  }\n\n  private handleEnd() {\n    const {onAbort, onEnd} = this.props;\n\n    this.detach();\n    if (!this.activated) {\n      onAbort(this.props.active);\n    }\n    onEnd();\n  }\n\n  private handleCancel() {\n    const {onAbort, onCancel} = this.props;\n\n    this.detach();\n    if (!this.activated) {\n      onAbort(this.props.active);\n    }\n    onCancel();\n  }\n\n  private handleKeydown(event: KeyboardEvent) {\n    if (event.code === KeyboardCode.Esc) {\n      this.handleCancel();\n    }\n  }\n\n  private removeTextSelection() {\n    this.document.getSelection()?.removeAllRanges();\n  }\n}\n","import {getOwnerDocument, getWindow} from '@dnd-kit/utilities';\n\nexport function getEventListenerTarget(\n  target: EventTarget | null\n): EventTarget | Document {\n  // If the `event.target` element is removed from the document events will still be targeted\n  // at it, and hence won't always bubble up to the window or document anymore.\n  // If there is any risk of an element being removed while it is being dragged,\n  // the best practice is to attach the event listeners directly to the target.\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n\n  const {EventTarget} = getWindow(target);\n\n  return target instanceof EventTarget ? target : getOwnerDocument(target);\n}\n","import type {PointerEvent} from 'react';\nimport {getOwnerDocument} from '@dnd-kit/utilities';\n\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  AbstractPointerSensorOptions,\n  PointerEventHandlers,\n} from './AbstractPointerSensor';\n\nconst events: PointerEventHandlers = {\n  cancel: {name: 'pointercancel'},\n  move: {name: 'pointermove'},\n  end: {name: 'pointerup'},\n};\n\nexport interface PointerSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type PointerSensorProps = SensorProps<PointerSensorOptions>;\n\nexport class PointerSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    const {event} = props;\n    // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n    const listenerTarget = getOwnerDocument(event.target);\n\n    super(props, events, listenerTarget);\n  }\n\n  static activators = [\n    {\n      eventName: 'onPointerDown' as const,\n      handler: (\n        {nativeEvent: event}: PointerEvent,\n        {onActivation}: PointerSensorOptions\n      ) => {\n        if (!event.isPrimary || event.button !== 0) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {MouseEvent} from 'react';\nimport {getOwnerDocument} from '@dnd-kit/utilities';\n\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  PointerEventHandlers,\n  AbstractPointerSensorOptions,\n} from '../pointer';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'mousemove'},\n  end: {name: 'mouseup'},\n};\n\nenum MouseButton {\n  RightClick = 2,\n}\n\nexport interface MouseSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type MouseSensorProps = SensorProps<MouseSensorOptions>;\n\nexport class MouseSensor extends AbstractPointerSensor {\n  constructor(props: MouseSensorProps) {\n    super(props, events, getOwnerDocument(props.event.target));\n  }\n\n  static activators = [\n    {\n      eventName: 'onMouseDown' as const,\n      handler: (\n        {nativeEvent: event}: MouseEvent,\n        {onActivation}: MouseSensorOptions\n      ) => {\n        if (event.button === MouseButton.RightClick) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {TouchEvent} from 'react';\n\nimport {\n  AbstractPointerSensor,\n  PointerSensorProps,\n  PointerEventHandlers,\n  PointerSensorOptions,\n} from '../pointer';\nimport type {SensorProps} from '../types';\n\nconst events: PointerEventHandlers = {\n  cancel: {name: 'touchcancel'},\n  move: {name: 'touchmove'},\n  end: {name: 'touchend'},\n};\n\nexport interface TouchSensorOptions extends PointerSensorOptions {}\n\nexport type TouchSensorProps = SensorProps<TouchSensorOptions>;\n\nexport class TouchSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    super(props, events);\n  }\n\n  static activators = [\n    {\n      eventName: 'onTouchStart' as const,\n      handler: (\n        {nativeEvent: event}: TouchEvent,\n        {onActivation}: TouchSensorOptions\n      ) => {\n        const {touches} = event;\n\n        if (touches.length > 1) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n\n  static setup() {\n    // Adding a non-capture and non-passive `touchmove` listener in order\n    // to force `event.preventDefault()` calls to work in dynamically added\n    // touchmove event handlers. This is required for iOS Safari.\n    window.addEventListener(events.move.name, noop, {\n      capture: false,\n      passive: false,\n    });\n\n    return function teardown() {\n      window.removeEventListener(events.move.name, noop);\n    };\n\n    // We create a new handler because the teardown function of another sensor\n    // could remove our event listener if we use a referentially equal listener.\n    function noop() {}\n  }\n}\n","import {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {useInterval, useLazyMemo, usePrevious} from '@dnd-kit/utilities';\n\nimport {getScrollDirectionAndSpeed} from '../../utilities';\nimport {Direction} from '../../types';\nimport type {Coordinates, ClientRect} from '../../types';\n\nexport type ScrollAncestorSortingFn = (ancestors: Element[]) => Element[];\n\nexport enum AutoScrollActivator {\n  Pointer,\n  DraggableRect,\n}\n\nexport interface Options {\n  acceleration?: number;\n  activator?: AutoScrollActivator;\n  canScroll?: CanScroll;\n  enabled?: boolean;\n  interval?: number;\n  layoutShiftCompensation?:\n    | boolean\n    | {\n        x: boolean;\n        y: boolean;\n      };\n  order?: TraversalOrder;\n  threshold?: {\n    x: number;\n    y: number;\n  };\n}\n\ninterface Arguments extends Options {\n  draggingRect: ClientRect | null;\n  enabled: boolean;\n  pointerCoordinates: Coordinates | null;\n  scrollableAncestors: Element[];\n  scrollableAncestorRects: ClientRect[];\n  delta: Coordinates;\n}\n\nexport type CanScroll = (element: Element) => boolean;\n\nexport enum TraversalOrder {\n  TreeOrder,\n  ReversedTreeOrder,\n}\n\ninterface ScrollDirection {\n  x: 0 | Direction;\n  y: 0 | Direction;\n}\n\nexport function useAutoScroller({\n  acceleration,\n  activator = AutoScrollActivator.Pointer,\n  canScroll,\n  draggingRect,\n  enabled,\n  interval = 5,\n  order = TraversalOrder.TreeOrder,\n  pointerCoordinates,\n  scrollableAncestors,\n  scrollableAncestorRects,\n  delta,\n  threshold,\n}: Arguments) {\n  const scrollIntent = useScrollIntent({delta, disabled: !enabled});\n  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();\n  const scrollSpeed = useRef<Coordinates>({x: 0, y: 0});\n  const scrollDirection = useRef<ScrollDirection>({x: 0, y: 0});\n  const rect = useMemo(() => {\n    switch (activator) {\n      case AutoScrollActivator.Pointer:\n        return pointerCoordinates\n          ? {\n              top: pointerCoordinates.y,\n              bottom: pointerCoordinates.y,\n              left: pointerCoordinates.x,\n              right: pointerCoordinates.x,\n            }\n          : null;\n      case AutoScrollActivator.DraggableRect:\n        return draggingRect;\n    }\n  }, [activator, draggingRect, pointerCoordinates]);\n  const scrollContainerRef = useRef<Element | null>(null);\n  const autoScroll = useCallback(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n  const sortedScrollableAncestors = useMemo(\n    () =>\n      order === TraversalOrder.TreeOrder\n        ? [...scrollableAncestors].reverse()\n        : scrollableAncestors,\n    [order, scrollableAncestors]\n  );\n\n  useEffect(\n    () => {\n      if (!enabled || !scrollableAncestors.length || !rect) {\n        clearAutoScrollInterval();\n        return;\n      }\n\n      for (const scrollContainer of sortedScrollableAncestors) {\n        if (canScroll?.(scrollContainer) === false) {\n          continue;\n        }\n\n        const index = scrollableAncestors.indexOf(scrollContainer);\n        const scrollContainerRect = scrollableAncestorRects[index];\n\n        if (!scrollContainerRect) {\n          continue;\n        }\n\n        const {direction, speed} = getScrollDirectionAndSpeed(\n          scrollContainer,\n          scrollContainerRect,\n          rect,\n          acceleration,\n          threshold\n        );\n\n        for (const axis of ['x', 'y'] as const) {\n          if (!scrollIntent[axis][direction[axis] as Direction]) {\n            speed[axis] = 0;\n            direction[axis] = 0;\n          }\n        }\n\n        if (speed.x > 0 || speed.y > 0) {\n          clearAutoScrollInterval();\n\n          scrollContainerRef.current = scrollContainer;\n          setAutoScrollInterval(autoScroll, interval);\n\n          scrollSpeed.current = speed;\n          scrollDirection.current = direction;\n\n          return;\n        }\n      }\n\n      scrollSpeed.current = {x: 0, y: 0};\n      scrollDirection.current = {x: 0, y: 0};\n      clearAutoScrollInterval();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      acceleration,\n      autoScroll,\n      canScroll,\n      clearAutoScrollInterval,\n      enabled,\n      interval,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(rect),\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(scrollIntent),\n      setAutoScrollInterval,\n      scrollableAncestors,\n      sortedScrollableAncestors,\n      scrollableAncestorRects,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(threshold),\n    ]\n  );\n}\n\ninterface ScrollIntent {\n  x: Record<Direction, boolean>;\n  y: Record<Direction, boolean>;\n}\n\nconst defaultScrollIntent: ScrollIntent = {\n  x: {[Direction.Backward]: false, [Direction.Forward]: false},\n  y: {[Direction.Backward]: false, [Direction.Forward]: false},\n};\n\nfunction useScrollIntent({\n  delta,\n  disabled,\n}: {\n  delta: Coordinates;\n  disabled: boolean;\n}): ScrollIntent {\n  const previousDelta = usePrevious(delta);\n\n  return useLazyMemo<ScrollIntent>(\n    (previousIntent) => {\n      if (disabled || !previousDelta || !previousIntent) {\n        // Reset scroll intent tracking when auto-scrolling is disabled\n        return defaultScrollIntent;\n      }\n\n      const direction = {\n        x: Math.sign(delta.x - previousDelta.x),\n        y: Math.sign(delta.y - previousDelta.y),\n      };\n\n      // Keep track of the user intent to scroll in each direction for both axis\n      return {\n        x: {\n          [Direction.Backward]:\n            previousIntent.x[Direction.Backward] || direction.x === -1,\n          [Direction.Forward]:\n            previousIntent.x[Direction.Forward] || direction.x === 1,\n        },\n        y: {\n          [Direction.Backward]:\n            previousIntent.y[Direction.Backward] || direction.y === -1,\n          [Direction.Forward]:\n            previousIntent.y[Direction.Forward] || direction.y === 1,\n        },\n      };\n    },\n    [disabled, delta, previousDelta]\n  );\n}\n","import {useCallback, useRef} from 'react';\n\nexport function useInterval() {\n  const intervalRef = useRef<number | null>(null);\n\n  const set = useCallback((listener: Function, duration: number) => {\n    intervalRef.current = setInterval(listener, duration);\n  }, []);\n\n  const clear = useCallback(() => {\n    if (intervalRef.current !== null) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, []);\n\n  return [set, clear] as const;\n}\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport {useLatestValue, useLazyMemo} from '@dnd-kit/utilities';\n\nimport {Rect} from '../../utilities/rect';\nimport type {DroppableContainer, RectMap} from '../../store/types';\nimport type {ClientRect, UniqueIdentifier} from '../../types';\n\ninterface Arguments {\n  dragging: boolean;\n  dependencies: any[];\n  config: DroppableMeasuring;\n}\n\nexport enum MeasuringStrategy {\n  Always,\n  BeforeDragging,\n  WhileDragging,\n}\n\nexport enum MeasuringFrequency {\n  Optimized = 'optimized',\n}\n\ntype MeasuringFunction = (element: HTMLElement) => ClientRect;\n\nexport interface DroppableMeasuring {\n  measure: MeasuringFunction;\n  strategy: MeasuringStrategy;\n  frequency: MeasuringFrequency | number;\n}\n\nconst defaultValue: RectMap = new Map();\n\nexport function useDroppableMeasuring(\n  containers: DroppableContainer[],\n  {dragging, dependencies, config}: Arguments\n) {\n  const [queue, setQueue] = useState<UniqueIdentifier[] | null>(null);\n  const {frequency, measure, strategy} = config;\n  const containersRef = useRef(containers);\n  const disabled = isDisabled();\n  const disabledRef = useLatestValue(disabled);\n  const measureDroppableContainers = useCallback(\n    (ids: UniqueIdentifier[] = []) => {\n      if (disabledRef.current) {\n        return;\n      }\n\n      setQueue((value) => {\n        if (value === null) {\n          return ids;\n        }\n\n        return value.concat(ids.filter((id) => !value.includes(id)));\n      });\n    },\n    [disabledRef]\n  );\n  const timeoutId = useRef<NodeJS.Timeout | null>(null);\n  const droppableRects = useLazyMemo<RectMap>(\n    (previousValue) => {\n      if (disabled && !dragging) {\n        return defaultValue;\n      }\n\n      if (\n        !previousValue ||\n        previousValue === defaultValue ||\n        containersRef.current !== containers ||\n        queue != null\n      ) {\n        const map: RectMap = new Map();\n\n        for (let container of containers) {\n          if (!container) {\n            continue;\n          }\n\n          if (\n            queue &&\n            queue.length > 0 &&\n            !queue.includes(container.id) &&\n            container.rect.current\n          ) {\n            // This container does not need to be re-measured\n            map.set(container.id, container.rect.current);\n            continue;\n          }\n\n          const node = container.node.current;\n          const rect = node ? new Rect(measure(node), node) : null;\n\n          container.rect.current = rect;\n\n          if (rect) {\n            map.set(container.id, rect);\n          }\n        }\n\n        return map;\n      }\n\n      return previousValue;\n    },\n    [containers, queue, dragging, disabled, measure]\n  );\n\n  useEffect(() => {\n    containersRef.current = containers;\n  }, [containers]);\n\n  useEffect(\n    () => {\n      if (disabled) {\n        return;\n      }\n\n      measureDroppableContainers();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dragging, disabled]\n  );\n\n  useEffect(\n    () => {\n      if (queue && queue.length > 0) {\n        setQueue(null);\n      }\n    },\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(queue)]\n  );\n\n  useEffect(\n    () => {\n      if (\n        disabled ||\n        typeof frequency !== 'number' ||\n        timeoutId.current !== null\n      ) {\n        return;\n      }\n\n      timeoutId.current = setTimeout(() => {\n        measureDroppableContainers();\n        timeoutId.current = null;\n      }, frequency);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [frequency, disabled, measureDroppableContainers, ...dependencies]\n  );\n\n  return {\n    droppableRects,\n    measureDroppableContainers,\n    measuringScheduled: queue != null,\n  };\n\n  function isDisabled() {\n    switch (strategy) {\n      case MeasuringStrategy.Always:\n        return false;\n      case MeasuringStrategy.BeforeDragging:\n        return dragging;\n      default:\n        return !dragging;\n    }\n  }\n}\n","import {useLazyMemo} from '@dnd-kit/utilities';\n\ntype AnyFunction = (...args: any) => any;\n\nexport function useInitialValue<\n  T,\n  U extends AnyFunction | undefined = undefined\n>(\n  value: T | null,\n  computeFn?: U\n): U extends AnyFunction ? ReturnType<U> | null : T | null {\n  return useLazyMemo(\n    (previousValue) => {\n      if (!value) {\n        return null;\n      }\n\n      if (previousValue) {\n        return previousValue;\n      }\n\n      return typeof computeFn === 'function' ? computeFn(value) : value;\n    },\n    [computeFn, value]\n  );\n}\n","import {useEffect, useMemo} from 'react';\nimport {useEvent} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  callback: ResizeObserverCallback;\n  disabled?: boolean;\n}\n\n/**\n * Returns a new ResizeObserver instance bound to the `onResize` callback.\n * If `ResizeObserver` is undefined in the execution environment, returns `undefined`.\n */\nexport function useResizeObserver({callback, disabled}: Arguments) {\n  const handleResize = useEvent(callback);\n  const resizeObserver = useMemo(\n    () => {\n      if (\n        disabled ||\n        typeof window === 'undefined' ||\n        typeof window.ResizeObserver === 'undefined'\n      ) {\n        return undefined;\n      }\n\n      const {ResizeObserver} = window;\n\n      return new ResizeObserver(handleResize);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [disabled]\n  );\n\n  useEffect(() => {\n    return () => resizeObserver?.disconnect();\n  }, [resizeObserver]);\n\n  return resizeObserver;\n}\n","import {useState} from 'react';\nimport {useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport type {ClientRect} from '../../types';\nimport {getClientRect, Rect} from '../../utilities';\n\nimport {useMutationObserver} from './useMutationObserver';\nimport {useResizeObserver} from './useResizeObserver';\n\nfunction defaultMeasure(element: HTMLElement) {\n  return new Rect(getClientRect(element), element);\n}\n\nexport function useRect(\n  element: HTMLElement | null,\n  measure: (element: HTMLElement) => ClientRect = defaultMeasure,\n  fallbackRect?: ClientRect | null\n) {\n  const [rect, setRect] = useState<ClientRect | null>(null);\n\n  function measureRect() {\n    setRect((currentRect): ClientRect | null => {\n      if (!element) {\n        return null;\n      }\n  \n      if (element.isConnected === false) {\n        // Fall back to last rect we measured if the element is\n        // no longer connected to the DOM.\n        return currentRect ?? fallbackRect ?? null;\n      }\n  \n      const newRect = measure(element);\n  \n      if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {\n        return currentRect;\n      }\n  \n      return newRect;\n    });\n  }\n  \n  const mutationObserver = useMutationObserver({\n    callback(records) {\n      if (!element) {\n        return;\n      }\n\n      for (const record of records) {\n        const {type, target} = record;\n\n        if (\n          type === 'childList' &&\n          target instanceof HTMLElement &&\n          target.contains(element)\n        ) {\n          measureRect();\n          break;\n        }\n      }\n    },\n  });\n  const resizeObserver = useResizeObserver({callback: measureRect});\n\n  useIsomorphicLayoutEffect(() => {\n    measureRect();\n\n    if (element) {\n      resizeObserver?.observe(element);\n      mutationObserver?.observe(document.body, {\n        childList: true,\n        subtree: true,\n      });\n    } else {\n      resizeObserver?.disconnect();\n      mutationObserver?.disconnect();\n    }\n  }, [element]);\n\n  return rect;\n}\n","import {useEffect, useMemo} from 'react';\nimport {useEvent} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  callback: MutationCallback;\n  disabled?: boolean;\n}\n\n/**\n * Returns a new MutationObserver instance.\n * If `MutationObserver` is undefined in the execution environment, returns `undefined`.\n */\nexport function useMutationObserver({callback, disabled}: Arguments) {\n  const handleMutations = useEvent(callback);\n  const mutationObserver = useMemo(() => {\n    if (\n      disabled ||\n      typeof window === 'undefined' ||\n      typeof window.MutationObserver === 'undefined'\n    ) {\n      return undefined;\n    }\n\n    const {MutationObserver} = window;\n\n    return new MutationObserver(handleMutations);\n  }, [handleMutations, disabled]);\n\n  useEffect(() => {\n    return () => mutationObserver?.disconnect();\n  }, [mutationObserver]);\n\n  return mutationObserver;\n}\n","import {useEffect, useRef} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {getScrollableAncestors} from '../../utilities';\n\nconst defaultValue: Element[] = [];\n\nexport function useScrollableAncestors(node: HTMLElement | null) {\n  const previousNode = useRef(node);\n\n  const ancestors = useLazyMemo<Element[]>(\n    (previousValue) => {\n      if (!node) {\n        return defaultValue;\n      }\n\n      if (\n        previousValue &&\n        previousValue !== defaultValue &&\n        node &&\n        previousNode.current &&\n        node.parentNode === previousNode.current.parentNode\n      ) {\n        return previousValue;\n      }\n\n      return getScrollableAncestors(node);\n    },\n    [node]\n  );\n\n  useEffect(() => {\n    previousNode.current = node;\n  }, [node]);\n\n  return ancestors;\n}\n","import {useEffect, useRef} from 'react';\nimport {Coordinates, subtract} from '@dnd-kit/utilities';\n\nimport {defaultCoordinates} from '../../utilities';\n\nexport function useScrollOffsetsDelta(\n  scrollOffsets: Coordinates,\n  dependencies: any[] = []\n) {\n  const initialScrollOffsets = useRef<Coordinates | null>(null);\n\n  useEffect(\n    () => {\n      initialScrollOffsets.current = null;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    dependencies\n  );\n\n  useEffect(() => {\n    const hasScrollOffsets = scrollOffsets !== defaultCoordinates;\n\n    if (hasScrollOffsets && !initialScrollOffsets.current) {\n      initialScrollOffsets.current = scrollOffsets;\n    }\n\n    if (!hasScrollOffsets && initialScrollOffsets.current) {\n      initialScrollOffsets.current = null;\n    }\n  }, [scrollOffsets]);\n\n  return initialScrollOffsets.current\n    ? subtract(scrollOffsets, initialScrollOffsets.current)\n    : defaultCoordinates;\n}\n","import {useMemo} from 'react';\n\nimport {getWindowClientRect} from '../../utilities/rect';\n\nexport function useWindowRect(element: typeof window | null) {\n  return useMemo(() => (element ? getWindowClientRect(element) : null), [\n    element,\n  ]);\n}\n","import type {ClientRect} from '../../types';\n\nexport function getWindowClientRect(element: typeof window): ClientRect {\n  const width = element.innerWidth;\n  const height = element.innerHeight;\n\n  return {\n    top: 0,\n    left: 0,\n    right: width,\n    bottom: height,\n    width,\n    height,\n  };\n}\n","import {useState} from 'react';\nimport {getWindow, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport type {ClientRect} from '../../types';\nimport {Rect, getClientRect} from '../../utilities/rect';\nimport {isDocumentScrollingElement} from '../../utilities';\n\nimport {useResizeObserver} from './useResizeObserver';\nimport {useWindowRect} from './useWindowRect';\n\nconst defaultValue: Rect[] = [];\n\nexport function useRects(\n  elements: Element[],\n  measure: (element: Element) => ClientRect = getClientRect\n): ClientRect[] {\n  const [firstElement] = elements;\n  const windowRect = useWindowRect(\n    firstElement ? getWindow(firstElement) : null\n  );\n  const [rects, setRects] = useState<ClientRect[]>(defaultValue);\n\n  function measureRects() {\n    setRects(() => {\n      if (!elements.length) {\n        return defaultValue;\n      }\n\n      return elements.map((element) =>\n        isDocumentScrollingElement(element)\n          ? (windowRect as ClientRect)\n          : new Rect(measure(element), element)\n      );\n    });\n  }\n\n  const resizeObserver = useResizeObserver({callback: measureRects});\n\n  useIsomorphicLayoutEffect(() => {\n    resizeObserver?.disconnect();\n    measureRects();\n    elements.forEach((element) => resizeObserver?.observe(element));\n  }, [elements]);\n\n  return rects;\n}\n","import {isHTMLElement} from '@dnd-kit/utilities';\n\nexport function getMeasurableNode(\n  node: HTMLElement | undefined | null\n): HTMLElement | null {\n  if (!node) {\n    return null;\n  }\n\n  if (node.children.length > 1) {\n    return node;\n  }\n  const firstChild = node.children[0];\n\n  return isHTMLElement(firstChild) ? firstChild : node;\n}\n","import type {DeepRequired} from '@dnd-kit/utilities';\n\nimport type {DataRef} from '../../store/types';\nimport {KeyboardSensor, PointerSensor} from '../../sensors';\nimport {MeasuringStrategy, MeasuringFrequency} from '../../hooks/utilities';\nimport {\n  getClientRect,\n  getTransformAgnosticClientRect,\n} from '../../utilities/rect';\n\nimport type {MeasuringConfiguration} from './types';\n\nexport const defaultSensors = [\n  {sensor: PointerSensor, options: {}},\n  {sensor: KeyboardSensor, options: {}},\n];\n\nexport const defaultData: DataRef = {current: {}};\n\nexport const defaultMeasuringConfiguration: DeepRequired<MeasuringConfiguration> = {\n  draggable: {\n    measure: getTransformAgnosticClientRect,\n  },\n  droppable: {\n    measure: getTransformAgnosticClientRect,\n    strategy: MeasuringStrategy.WhileDragging,\n    frequency: MeasuringFrequency.Optimized,\n  },\n  dragOverlay: {\n    measure: getClientRect,\n  },\n};\n","import type {UniqueIdentifier} from '../types';\nimport type {DroppableContainer} from './types';\n\ntype Identifier = UniqueIdentifier | null | undefined;\n\nexport class DroppableContainersMap extends Map<\n  UniqueIdentifier,\n  DroppableContainer\n> {\n  get(id: Identifier) {\n    return id != null ? super.get(id) ?? undefined : undefined;\n  }\n\n  toArray(): DroppableContainer[] {\n    return Array.from(this.values());\n  }\n\n  getEnabled(): DroppableContainer[] {\n    return this.toArray().filter(({disabled}) => !disabled);\n  }\n\n  getNodeFor(id: Identifier) {\n    return this.get(id)?.node.current ?? undefined;\n  }\n}\n","import {createContext} from 'react';\n\nimport {noop} from '../utilities/other';\nimport {defaultMeasuringConfiguration} from '../components/DndContext/defaults';\nimport {DroppableContainersMap} from './constructors';\nimport type {InternalContextDescriptor, PublicContextDescriptor} from './types';\n\nexport const defaultPublicContext: PublicContextDescriptor = {\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  collisions: null,\n  containerNodeRect: null,\n  draggableNodes: new Map(),\n  droppableRects: new Map(),\n  droppableContainers: new DroppableContainersMap(),\n  over: null,\n  dragOverlay: {\n    nodeRef: {\n      current: null,\n    },\n    rect: null,\n    setRef: noop,\n  },\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  measuringConfiguration: defaultMeasuringConfiguration,\n  measureDroppableContainers: noop,\n  windowRect: null,\n  measuringScheduled: false,\n};\n\nexport const defaultInternalContext: InternalContextDescriptor = {\n  activatorEvent: null,\n  activators: [],\n  active: null,\n  activeNodeRect: null,\n  ariaDescribedById: {\n    draggable: '',\n  },\n  dispatch: noop,\n  draggableNodes: new Map(),\n  over: null,\n  measureDroppableContainers: noop,\n};\n\nexport const InternalContext = createContext<InternalContextDescriptor>(\n  defaultInternalContext\n);\n\nexport const PublicContext = createContext<PublicContextDescriptor>(\n  defaultPublicContext\n);\n","import {Action, Actions} from './actions';\nimport {DroppableContainersMap} from './constructors';\nimport type {State} from './types';\n\nexport function getInitialState(): State {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {x: 0, y: 0},\n      nodes: new Map(),\n      translate: {x: 0, y: 0},\n    },\n    droppable: {\n      containers: new DroppableContainersMap(),\n    },\n  };\n}\n\nexport function reducer(state: State, action: Actions): State {\n  switch (action.type) {\n    case Action.DragStart:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          initialCoordinates: action.initialCoordinates,\n          active: action.active,\n        },\n      };\n    case Action.DragMove:\n      if (state.draggable.active == null) {\n        return state;\n      }\n\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y,\n          },\n        },\n      };\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          active: null,\n          initialCoordinates: {x: 0, y: 0},\n          translate: {x: 0, y: 0},\n        },\n      };\n\n    case Action.RegisterDroppable: {\n      const {element} = action;\n      const {id} = element;\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.set(id, element);\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    case Action.SetDroppableDisabled: {\n      const {id, key, disabled} = action;\n      const element = state.droppable.containers.get(id);\n\n      if (!element || key !== element.key) {\n        return state;\n      }\n\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.set(id, {\n        ...element,\n        disabled,\n      });\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    case Action.UnregisterDroppable: {\n      const {id, key} = action;\n      const element = state.droppable.containers.get(id);\n\n      if (!element || key !== element.key) {\n        return state;\n      }\n\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.delete(id);\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import {useContext, useEffect} from 'react';\nimport {\n  findFirstFocusableNode,\n  isKeyboardEvent,\n  usePrevious,\n} from '@dnd-kit/utilities';\n\nimport {InternalContext} from '../../../store';\n\ninterface Props {\n  disabled: boolean;\n}\n\nexport function RestoreFocus({disabled}: Props) {\n  const {active, activatorEvent, draggableNodes} = useContext(InternalContext);\n  const previousActivatorEvent = usePrevious(activatorEvent);\n  const previousActiveId = usePrevious(active?.id);\n\n  // Restore keyboard focus on the activator node\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n\n    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {\n      if (!isKeyboardEvent(previousActivatorEvent)) {\n        return;\n      }\n\n      if (document.activeElement === previousActivatorEvent.target) {\n        // No need to restore focus\n        return;\n      }\n\n      const draggableNode = draggableNodes.get(previousActiveId);\n\n      if (!draggableNode) {\n        return;\n      }\n\n      const {activatorNode, node} = draggableNode;\n\n      if (!activatorNode.current && !node.current) {\n        return;\n      }\n\n      requestAnimationFrame(() => {\n        for (const element of [activatorNode.current, node.current]) {\n          if (!element) {\n            continue;\n          }\n\n          const focusableNode = findFirstFocusableNode(element);\n\n          if (focusableNode) {\n            focusableNode.focus();\n            break;\n          }\n        }\n      });\n    }\n  }, [\n    activatorEvent,\n    disabled,\n    draggableNodes,\n    previousActiveId,\n    previousActivatorEvent,\n  ]);\n\n  return null;\n}\n","import type {FirstArgument, Transform} from '@dnd-kit/utilities';\n\nimport type {Modifiers, Modifier} from './types';\n\nexport function applyModifiers(\n  modifiers: Modifiers | undefined,\n  {transform, ...args}: FirstArgument<Modifier>\n): Transform {\n  return modifiers?.length\n    ? modifiers.reduce<Transform>((accumulator, modifier) => {\n        return modifier({\n          transform: accumulator,\n          ...args,\n        });\n      }, transform)\n    : transform;\n}\n","import React, {\n  memo,\n  createContext,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport {unstable_batchedUpdates} from 'react-dom';\nimport {\n  add,\n  getEventCoordinates,\n  getWindow,\n  useLatestValue,\n  useIsomorphicLayoutEffect,\n  useUniqueId,\n} from '@dnd-kit/utilities';\nimport type {Transform} from '@dnd-kit/utilities';\n\nimport {\n  Action,\n  PublicContext,\n  InternalContext,\n  PublicContextDescriptor,\n  InternalContextDescriptor,\n  getInitialState,\n  reducer,\n} from '../../store';\nimport {DndMonitorContext, useDndMonitorProvider} from '../DndMonitor';\nimport {\n  useAutoScroller,\n  useCachedNode,\n  useCombineActivators,\n  useDragOverlayMeasuring,\n  useDroppableMeasuring,\n  useInitialRect,\n  useRect,\n  useRectDelta,\n  useRects,\n  useScrollableAncestors,\n  useScrollOffsets,\n  useScrollOffsetsDelta,\n  useSensorSetup,\n  useWindowRect,\n} from '../../hooks/utilities';\nimport type {AutoScrollOptions, SyntheticListener} from '../../hooks/utilities';\nimport type {\n  Sensor,\n  SensorContext,\n  SensorDescriptor,\n  SensorActivatorFunction,\n  SensorInstance,\n} from '../../sensors';\nimport {\n  adjustScale,\n  CollisionDetection,\n  defaultCoordinates,\n  getAdjustedRect,\n  getFirstCollision,\n  rectIntersection,\n} from '../../utilities';\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport type {Active, Over} from '../../store/types';\nimport type {\n  DragStartEvent,\n  DragCancelEvent,\n  DragEndEvent,\n  DragMoveEvent,\n  DragOverEvent,\n  UniqueIdentifier,\n  DragPendingEvent,\n  DragAbortEvent,\n} from '../../types';\nimport {\n  Accessibility,\n  Announcements,\n  RestoreFocus,\n  ScreenReaderInstructions,\n} from '../Accessibility';\n\nimport {defaultData, defaultSensors} from './defaults';\nimport {\n  useLayoutShiftScrollCompensation,\n  useMeasuringConfiguration,\n} from './hooks';\nimport type {MeasuringConfiguration} from './types';\n\nexport interface Props {\n  id?: string;\n  accessibility?: {\n    announcements?: Announcements;\n    container?: Element;\n    restoreFocus?: boolean;\n    screenReaderInstructions?: ScreenReaderInstructions;\n  };\n  autoScroll?: boolean | AutoScrollOptions;\n  cancelDrop?: CancelDrop;\n  children?: React.ReactNode;\n  collisionDetection?: CollisionDetection;\n  measuring?: MeasuringConfiguration;\n  modifiers?: Modifiers;\n  sensors?: SensorDescriptor<any>[];\n  onDragAbort?(event: DragAbortEvent): void;\n  onDragPending?(event: DragPendingEvent): void;\n  onDragStart?(event: DragStartEvent): void;\n  onDragMove?(event: DragMoveEvent): void;\n  onDragOver?(event: DragOverEvent): void;\n  onDragEnd?(event: DragEndEvent): void;\n  onDragCancel?(event: DragCancelEvent): void;\n}\n\nexport interface CancelDropArguments extends DragEndEvent {}\n\nexport type CancelDrop = (\n  args: CancelDropArguments\n) => boolean | Promise<boolean>;\n\ninterface DndEvent extends Event {\n  dndKit?: {\n    capturedBy: Sensor<any>;\n  };\n}\n\nexport const ActiveDraggableContext = createContext<Transform>({\n  ...defaultCoordinates,\n  scaleX: 1,\n  scaleY: 1,\n});\n\nenum Status {\n  Uninitialized,\n  Initializing,\n  Initialized,\n}\n\nexport const DndContext = memo(function DndContext({\n  id,\n  accessibility,\n  autoScroll = true,\n  children,\n  sensors = defaultSensors,\n  collisionDetection = rectIntersection,\n  measuring,\n  modifiers,\n  ...props\n}: Props) {\n  const store = useReducer(reducer, undefined, getInitialState);\n  const [state, dispatch] = store;\n  const [dispatchMonitorEvent, registerMonitorListener] =\n    useDndMonitorProvider();\n  const [status, setStatus] = useState<Status>(Status.Uninitialized);\n  const isInitialized = status === Status.Initialized;\n  const {\n    draggable: {active: activeId, nodes: draggableNodes, translate},\n    droppable: {containers: droppableContainers},\n  } = state;\n  const node = activeId != null ? draggableNodes.get(activeId) : null;\n  const activeRects = useRef<Active['rect']['current']>({\n    initial: null,\n    translated: null,\n  });\n  const active = useMemo<Active | null>(\n    () =>\n      activeId != null\n        ? {\n            id: activeId,\n            // It's possible for the active node to unmount while dragging\n            data: node?.data ?? defaultData,\n            rect: activeRects,\n          }\n        : null,\n    [activeId, node]\n  );\n  const activeRef = useRef<UniqueIdentifier | null>(null);\n  const [activeSensor, setActiveSensor] = useState<SensorInstance | null>(null);\n  const [activatorEvent, setActivatorEvent] = useState<Event | null>(null);\n  const latestProps = useLatestValue(props, Object.values(props));\n  const draggableDescribedById = useUniqueId(`DndDescribedBy`, id);\n  const enabledDroppableContainers = useMemo(\n    () => droppableContainers.getEnabled(),\n    [droppableContainers]\n  );\n  const measuringConfiguration = useMeasuringConfiguration(measuring);\n  const {droppableRects, measureDroppableContainers, measuringScheduled} =\n    useDroppableMeasuring(enabledDroppableContainers, {\n      dragging: isInitialized,\n      dependencies: [translate.x, translate.y],\n      config: measuringConfiguration.droppable,\n    });\n  const activeNode = useCachedNode(draggableNodes, activeId);\n  const activationCoordinates = useMemo(\n    () => (activatorEvent ? getEventCoordinates(activatorEvent) : null),\n    [activatorEvent]\n  );\n  const autoScrollOptions = getAutoScrollerOptions();\n  const initialActiveNodeRect = useInitialRect(\n    activeNode,\n    measuringConfiguration.draggable.measure\n  );\n\n  useLayoutShiftScrollCompensation({\n    activeNode: activeId != null ? draggableNodes.get(activeId) : null,\n    config: autoScrollOptions.layoutShiftCompensation,\n    initialRect: initialActiveNodeRect,\n    measure: measuringConfiguration.draggable.measure,\n  });\n\n  const activeNodeRect = useRect(\n    activeNode,\n    measuringConfiguration.draggable.measure,\n    initialActiveNodeRect\n  );\n  const containerNodeRect = useRect(\n    activeNode ? activeNode.parentElement : null\n  );\n  const sensorContext = useRef<SensorContext>({\n    activatorEvent: null,\n    active: null,\n    activeNode,\n    collisionRect: null,\n    collisions: null,\n    droppableRects,\n    draggableNodes,\n    draggingNode: null,\n    draggingNodeRect: null,\n    droppableContainers,\n    over: null,\n    scrollableAncestors: [],\n    scrollAdjustedTranslate: null,\n  });\n  const overNode = droppableContainers.getNodeFor(\n    sensorContext.current.over?.id\n  );\n  const dragOverlay = useDragOverlayMeasuring({\n    measure: measuringConfiguration.dragOverlay.measure,\n  });\n\n  // Use the rect of the drag overlay if it is mounted\n  const draggingNode = dragOverlay.nodeRef.current ?? activeNode;\n  const draggingNodeRect = isInitialized\n    ? dragOverlay.rect ?? activeNodeRect\n    : null;\n  const usesDragOverlay = Boolean(\n    dragOverlay.nodeRef.current && dragOverlay.rect\n  );\n  // The delta between the previous and new position of the draggable node\n  // is only relevant when there is no drag overlay\n  const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect);\n\n  // Get the window rect of the dragging node\n  const windowRect = useWindowRect(\n    draggingNode ? getWindow(draggingNode) : null\n  );\n\n  // Get scrollable ancestors of the dragging node\n  const scrollableAncestors = useScrollableAncestors(\n    isInitialized ? overNode ?? activeNode : null\n  );\n  const scrollableAncestorRects = useRects(scrollableAncestors);\n\n  // Apply modifiers\n  const modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1,\n    },\n    activatorEvent,\n    active,\n    activeNodeRect,\n    containerNodeRect,\n    draggingNodeRect,\n    over: sensorContext.current.over,\n    overlayNodeRect: dragOverlay.rect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect,\n  });\n\n  const pointerCoordinates = activationCoordinates\n    ? add(activationCoordinates, translate)\n    : null;\n\n  const scrollOffsets = useScrollOffsets(scrollableAncestors);\n  // Represents the scroll delta since dragging was initiated\n  const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets);\n  // Represents the scroll delta since the last time the active node rect was measured\n  const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [\n    activeNodeRect,\n  ]);\n\n  const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);\n\n  const collisionRect = draggingNodeRect\n    ? getAdjustedRect(draggingNodeRect, modifiedTranslate)\n    : null;\n\n  const collisions =\n    active && collisionRect\n      ? collisionDetection({\n          active,\n          collisionRect,\n          droppableRects,\n          droppableContainers: enabledDroppableContainers,\n          pointerCoordinates,\n        })\n      : null;\n  const overId = getFirstCollision(collisions, 'id');\n  const [over, setOver] = useState<Over | null>(null);\n\n  // When there is no drag overlay used, we need to account for the\n  // window scroll delta\n  const appliedTranslate = usesDragOverlay\n    ? modifiedTranslate\n    : add(modifiedTranslate, activeNodeScrollDelta);\n\n  const transform = adjustScale(\n    appliedTranslate,\n    over?.rect ?? null,\n    activeNodeRect\n  );\n\n  const activeSensorRef = useRef<SensorInstance | null>(null);\n  const instantiateSensor = useCallback(\n    (\n      event: React.SyntheticEvent,\n      {sensor: Sensor, options}: SensorDescriptor<any>\n    ) => {\n      if (activeRef.current == null) {\n        return;\n      }\n\n      const activeNode = draggableNodes.get(activeRef.current);\n\n      if (!activeNode) {\n        return;\n      }\n\n      const activatorEvent = event.nativeEvent;\n\n      const sensorInstance = new Sensor({\n        active: activeRef.current,\n        activeNode,\n        event: activatorEvent,\n        options,\n        // Sensors need to be instantiated with refs for arguments that change over time\n        // otherwise they are frozen in time with the stale arguments\n        context: sensorContext,\n        onAbort(id) {\n          const draggableNode = draggableNodes.get(id);\n\n          if (!draggableNode) {\n            return;\n          }\n\n          const {onDragAbort} = latestProps.current;\n          const event: DragAbortEvent = {id};\n          onDragAbort?.(event);\n          dispatchMonitorEvent({type: 'onDragAbort', event});\n        },\n        onPending(id, constraint, initialCoordinates, offset) {\n          const draggableNode = draggableNodes.get(id);\n\n          if (!draggableNode) {\n            return;\n          }\n\n          const {onDragPending} = latestProps.current;\n          const event: DragPendingEvent = {\n            id,\n            constraint,\n            initialCoordinates,\n            offset,\n          };\n\n          onDragPending?.(event);\n          dispatchMonitorEvent({type: 'onDragPending', event});\n        },\n        onStart(initialCoordinates) {\n          const id = activeRef.current;\n\n          if (id == null) {\n            return;\n          }\n\n          const draggableNode = draggableNodes.get(id);\n\n          if (!draggableNode) {\n            return;\n          }\n\n          const {onDragStart} = latestProps.current;\n          const event: DragStartEvent = {\n            activatorEvent,\n            active: {id, data: draggableNode.data, rect: activeRects},\n          };\n\n          unstable_batchedUpdates(() => {\n            onDragStart?.(event);\n            setStatus(Status.Initializing);\n            dispatch({\n              type: Action.DragStart,\n              initialCoordinates,\n              active: id,\n            });\n            dispatchMonitorEvent({type: 'onDragStart', event});\n            setActiveSensor(activeSensorRef.current);\n            setActivatorEvent(activatorEvent);\n          });\n        },\n        onMove(coordinates) {\n          dispatch({\n            type: Action.DragMove,\n            coordinates,\n          });\n        },\n        onEnd: createHandler(Action.DragEnd),\n        onCancel: createHandler(Action.DragCancel),\n      });\n\n      activeSensorRef.current = sensorInstance;\n\n      function createHandler(type: Action.DragEnd | Action.DragCancel) {\n        return async function handler() {\n          const {active, collisions, over, scrollAdjustedTranslate} =\n            sensorContext.current;\n          let event: DragEndEvent | null = null;\n\n          if (active && scrollAdjustedTranslate) {\n            const {cancelDrop} = latestProps.current;\n\n            event = {\n              activatorEvent,\n              active: active,\n              collisions,\n              delta: scrollAdjustedTranslate,\n              over,\n            };\n\n            if (type === Action.DragEnd && typeof cancelDrop === 'function') {\n              const shouldCancel = await Promise.resolve(cancelDrop(event));\n\n              if (shouldCancel) {\n                type = Action.DragCancel;\n              }\n            }\n          }\n\n          activeRef.current = null;\n\n          unstable_batchedUpdates(() => {\n            dispatch({type});\n            setStatus(Status.Uninitialized);\n            setOver(null);\n            setActiveSensor(null);\n            setActivatorEvent(null);\n            activeSensorRef.current = null;\n\n            const eventName =\n              type === Action.DragEnd ? 'onDragEnd' : 'onDragCancel';\n\n            if (event) {\n              const handler = latestProps.current[eventName];\n\n              handler?.(event);\n              dispatchMonitorEvent({type: eventName, event});\n            }\n          });\n        };\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [draggableNodes]\n  );\n\n  const bindActivatorToSensorInstantiator = useCallback(\n    (\n      handler: SensorActivatorFunction<any>,\n      sensor: SensorDescriptor<any>\n    ): SyntheticListener['handler'] => {\n      return (event, active) => {\n        const nativeEvent = event.nativeEvent as DndEvent;\n        const activeDraggableNode = draggableNodes.get(active);\n\n        if (\n          // Another sensor is already instantiating\n          activeRef.current !== null ||\n          // No active draggable\n          !activeDraggableNode ||\n          // Event has already been captured\n          nativeEvent.dndKit ||\n          nativeEvent.defaultPrevented\n        ) {\n          return;\n        }\n\n        const activationContext = {\n          active: activeDraggableNode,\n        };\n        const shouldActivate = handler(\n          event,\n          sensor.options,\n          activationContext\n        );\n\n        if (shouldActivate === true) {\n          nativeEvent.dndKit = {\n            capturedBy: sensor.sensor,\n          };\n\n          activeRef.current = active;\n          instantiateSensor(event, sensor);\n        }\n      };\n    },\n    [draggableNodes, instantiateSensor]\n  );\n\n  const activators = useCombineActivators(\n    sensors,\n    bindActivatorToSensorInstantiator\n  );\n\n  useSensorSetup(sensors);\n\n  useIsomorphicLayoutEffect(() => {\n    if (activeNodeRect && status === Status.Initializing) {\n      setStatus(Status.Initialized);\n    }\n  }, [activeNodeRect, status]);\n\n  useEffect(\n    () => {\n      const {onDragMove} = latestProps.current;\n      const {active, activatorEvent, collisions, over} = sensorContext.current;\n\n      if (!active || !activatorEvent) {\n        return;\n      }\n\n      const event: DragMoveEvent = {\n        active,\n        activatorEvent,\n        collisions,\n        delta: {\n          x: scrollAdjustedTranslate.x,\n          y: scrollAdjustedTranslate.y,\n        },\n        over,\n      };\n\n      unstable_batchedUpdates(() => {\n        onDragMove?.(event);\n        dispatchMonitorEvent({type: 'onDragMove', event});\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]\n  );\n\n  useEffect(\n    () => {\n      const {\n        active,\n        activatorEvent,\n        collisions,\n        droppableContainers,\n        scrollAdjustedTranslate,\n      } = sensorContext.current;\n\n      if (\n        !active ||\n        activeRef.current == null ||\n        !activatorEvent ||\n        !scrollAdjustedTranslate\n      ) {\n        return;\n      }\n\n      const {onDragOver} = latestProps.current;\n      const overContainer = droppableContainers.get(overId);\n      const over =\n        overContainer && overContainer.rect.current\n          ? {\n              id: overContainer.id,\n              rect: overContainer.rect.current,\n              data: overContainer.data,\n              disabled: overContainer.disabled,\n            }\n          : null;\n      const event: DragOverEvent = {\n        active,\n        activatorEvent,\n        collisions,\n        delta: {\n          x: scrollAdjustedTranslate.x,\n          y: scrollAdjustedTranslate.y,\n        },\n        over,\n      };\n\n      unstable_batchedUpdates(() => {\n        setOver(over);\n        onDragOver?.(event);\n        dispatchMonitorEvent({type: 'onDragOver', event});\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [overId]\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    sensorContext.current = {\n      activatorEvent,\n      active,\n      activeNode,\n      collisionRect,\n      collisions,\n      droppableRects,\n      draggableNodes,\n      draggingNode,\n      draggingNodeRect,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n      scrollAdjustedTranslate,\n    };\n\n    activeRects.current = {\n      initial: draggingNodeRect,\n      translated: collisionRect,\n    };\n  }, [\n    active,\n    activeNode,\n    collisions,\n    collisionRect,\n    draggableNodes,\n    draggingNode,\n    draggingNodeRect,\n    droppableRects,\n    droppableContainers,\n    over,\n    scrollableAncestors,\n    scrollAdjustedTranslate,\n  ]);\n\n  useAutoScroller({\n    ...autoScrollOptions,\n    delta: translate,\n    draggingRect: collisionRect,\n    pointerCoordinates,\n    scrollableAncestors,\n    scrollableAncestorRects,\n  });\n\n  const publicContext = useMemo(() => {\n    const context: PublicContextDescriptor = {\n      active,\n      activeNode,\n      activeNodeRect,\n      activatorEvent,\n      collisions,\n      containerNodeRect,\n      dragOverlay,\n      draggableNodes,\n      droppableContainers,\n      droppableRects,\n      over,\n      measureDroppableContainers,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      measuringConfiguration,\n      measuringScheduled,\n      windowRect,\n    };\n\n    return context;\n  }, [\n    active,\n    activeNode,\n    activeNodeRect,\n    activatorEvent,\n    collisions,\n    containerNodeRect,\n    dragOverlay,\n    draggableNodes,\n    droppableContainers,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    measuringConfiguration,\n    measuringScheduled,\n    windowRect,\n  ]);\n\n  const internalContext = useMemo(() => {\n    const context: InternalContextDescriptor = {\n      activatorEvent,\n      activators,\n      active,\n      activeNodeRect,\n      ariaDescribedById: {\n        draggable: draggableDescribedById,\n      },\n      dispatch,\n      draggableNodes,\n      over,\n      measureDroppableContainers,\n    };\n\n    return context;\n  }, [\n    activatorEvent,\n    activators,\n    active,\n    activeNodeRect,\n    dispatch,\n    draggableDescribedById,\n    draggableNodes,\n    over,\n    measureDroppableContainers,\n  ]);\n\n  return (\n    <DndMonitorContext.Provider value={registerMonitorListener}>\n      <InternalContext.Provider value={internalContext}>\n        <PublicContext.Provider value={publicContext}>\n          <ActiveDraggableContext.Provider value={transform}>\n            {children}\n          </ActiveDraggableContext.Provider>\n        </PublicContext.Provider>\n        <RestoreFocus disabled={accessibility?.restoreFocus === false} />\n      </InternalContext.Provider>\n      <Accessibility\n        {...accessibility}\n        hiddenTextDescribedById={draggableDescribedById}\n      />\n    </DndMonitorContext.Provider>\n  );\n\n  function getAutoScrollerOptions() {\n    const activeSensorDisablesAutoscroll =\n      activeSensor?.autoScrollEnabled === false;\n    const autoScrollGloballyDisabled =\n      typeof autoScroll === 'object'\n        ? autoScroll.enabled === false\n        : autoScroll === false;\n    const enabled =\n      isInitialized &&\n      !activeSensorDisablesAutoscroll &&\n      !autoScrollGloballyDisabled;\n\n    if (typeof autoScroll === 'object') {\n      return {\n        ...autoScroll,\n        enabled,\n      };\n    }\n\n    return {enabled};\n  }\n});\n","import {useCallback, useState} from 'react';\n\nimport type {DndMonitorListener, DndMonitorEvent} from './types';\n\nexport function useDndMonitorProvider() {\n  const [listeners] = useState(() => new Set<DndMonitorListener>());\n\n  const registerListener = useCallback(\n    (listener) => {\n      listeners.add(listener);\n      return () => listeners.delete(listener);\n    },\n    [listeners]\n  );\n\n  const dispatch = useCallback(\n    ({type, event}: DndMonitorEvent) => {\n      listeners.forEach((listener) => listener[type]?.(event as any));\n    },\n    [listeners]\n  );\n\n  return [dispatch, registerListener] as const;\n}\n","import {useMemo} from 'react';\nimport type {DeepRequired} from '@dnd-kit/utilities';\n\nimport {defaultMeasuringConfiguration} from '../defaults';\nimport type {MeasuringConfiguration} from '../types';\n\nexport function useMeasuringConfiguration(\n  config: MeasuringConfiguration | undefined\n): DeepRequired<MeasuringConfiguration> {\n  return useMemo(\n    () => ({\n      draggable: {\n        ...defaultMeasuringConfiguration.draggable,\n        ...config?.draggable,\n      },\n      droppable: {\n        ...defaultMeasuringConfiguration.droppable,\n        ...config?.droppable,\n      },\n      dragOverlay: {\n        ...defaultMeasuringConfiguration.dragOverlay,\n        ...config?.dragOverlay,\n      },\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [config?.draggable, config?.droppable, config?.dragOverlay]\n  );\n}\n","import {useLazyMemo} from '@dnd-kit/utilities';\n\nimport type {DraggableNode, DraggableNodes} from '../../store';\nimport type {UniqueIdentifier} from '../../types';\n\nexport function useCachedNode(\n  draggableNodes: DraggableNodes,\n  id: UniqueIdentifier | null\n): DraggableNode['node']['current'] {\n  const draggableNode = id != null ? draggableNodes.get(id) : undefined;\n  const node = draggableNode ? draggableNode.node.current : null;\n\n  return useLazyMemo(\n    (cachedNode) => {\n      if (id == null) {\n        return null;\n      }\n\n      // In some cases, the draggable node can unmount while dragging\n      // This is the case for virtualized lists. In those situations,\n      // we fall back to the last known value for that node.\n      return node ?? cachedNode ?? null;\n    },\n    [node, id]\n  );\n}\n","import type {ClientRect} from '../../types';\nimport {useInitialValue} from './useInitialValue';\n\nexport function useInitialRect(\n  node: HTMLElement | null,\n  measure: (node: HTMLElement) => ClientRect\n) {\n  return useInitialValue(node, measure);\n}\n","import {useRef} from 'react';\nimport {useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport {getRectDelta} from '../../../utilities/rect';\nimport {getFirstScrollableAncestor} from '../../../utilities/scroll';\nimport type {ClientRect} from '../../../types';\nimport type {DraggableNode} from '../../../store';\nimport type {MeasuringFunction} from '../types';\n\ninterface Options {\n  activeNode: DraggableNode | null | undefined;\n  config: boolean | {x: boolean; y: boolean} | undefined;\n  initialRect: ClientRect | null;\n  measure: MeasuringFunction;\n}\n\nexport function useLayoutShiftScrollCompensation({\n  activeNode,\n  measure,\n  initialRect,\n  config = true,\n}: Options) {\n  const initialized = useRef(false);\n  const {x, y} = typeof config === 'boolean' ? {x: config, y: config} : config;\n\n  useIsomorphicLayoutEffect(() => {\n    const disabled = !x && !y;\n\n    if (disabled || !activeNode) {\n      initialized.current = false;\n      return;\n    }\n\n    if (initialized.current || !initialRect) {\n      // Return early if layout shift scroll compensation was already attempted\n      // or if there is no initialRect to compare to.\n      return;\n    }\n\n    // Get the most up to date node ref for the active draggable\n    const node = activeNode?.node.current;\n\n    if (!node || node.isConnected === false) {\n      // Return early if there is no attached node ref or if the node is\n      // disconnected from the document.\n      return;\n    }\n\n    const rect = measure(node);\n    const rectDelta = getRectDelta(rect, initialRect);\n\n    if (!x) {\n      rectDelta.x = 0;\n    }\n\n    if (!y) {\n      rectDelta.y = 0;\n    }\n\n    // Only perform layout shift scroll compensation once\n    initialized.current = true;\n\n    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {\n      const firstScrollableAncestor = getFirstScrollableAncestor(node);\n\n      if (firstScrollableAncestor) {\n        firstScrollableAncestor.scrollBy({\n          top: rectDelta.y,\n          left: rectDelta.x,\n        });\n      }\n    }\n  }, [activeNode, x, y, initialRect, measure]);\n}\n","import {useMemo, useCallback, useState} from 'react';\nimport {isHTMLElement, useNodeRef} from '@dnd-kit/utilities';\n\nimport {useResizeObserver} from './useResizeObserver';\nimport {getMeasurableNode} from '../../utilities/nodes';\nimport type {PublicContextDescriptor} from '../../store';\nimport type {ClientRect} from '../../types';\n\ninterface Arguments {\n  measure(element: HTMLElement): ClientRect;\n}\n\nexport function useDragOverlayMeasuring({\n  measure,\n}: Arguments): PublicContextDescriptor['dragOverlay'] {\n  const [rect, setRect] = useState<ClientRect | null>(null);\n  const handleResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      for (const {target} of entries) {\n        if (isHTMLElement(target)) {\n          setRect((rect) => {\n            const newRect = measure(target);\n\n            return rect\n              ? {...rect, width: newRect.width, height: newRect.height}\n              : newRect;\n          });\n          break;\n        }\n      }\n    },\n    [measure]\n  );\n  const resizeObserver = useResizeObserver({callback: handleResize});\n  const handleNodeChange = useCallback(\n    (element) => {\n      const node = getMeasurableNode(element);\n\n      resizeObserver?.disconnect();\n\n      if (node) {\n        resizeObserver?.observe(node);\n      }\n\n      setRect(node ? measure(node) : null);\n    },\n    [measure, resizeObserver]\n  );\n  const [nodeRef, setRef] = useNodeRef(handleNodeChange);\n\n  return useMemo(\n    () => ({\n      nodeRef,\n      rect,\n      setRef,\n    }),\n    [rect, nodeRef, setRef]\n  );\n}\n","import type {ClientRect} from '../../types';\nimport {getRectDelta} from '../../utilities';\n\nimport {useInitialValue} from './useInitialValue';\n\nexport function useRectDelta(rect: ClientRect | null) {\n  const initialRect = useInitialValue(rect);\n\n  return getRectDelta(rect, initialRect);\n}\n","import {useState, useCallback, useMemo, useRef, useEffect} from 'react';\nimport {add} from '@dnd-kit/utilities';\n\nimport {\n  defaultCoordinates,\n  getScrollableElement,\n  getScrollCoordinates,\n  getScrollOffsets,\n} from '../../utilities';\nimport type {Coordinates} from '../../types';\n\ntype ScrollCoordinates = Map<HTMLElement | Window, Coordinates>;\n\nexport function useScrollOffsets(elements: Element[]): Coordinates {\n  const [\n    scrollCoordinates,\n    setScrollCoordinates,\n  ] = useState<ScrollCoordinates | null>(null);\n  const prevElements = useRef(elements);\n\n  // To-do: Throttle the handleScroll callback\n  const handleScroll = useCallback((event: Event) => {\n    const scrollingElement = getScrollableElement(event.target);\n\n    if (!scrollingElement) {\n      return;\n    }\n\n    setScrollCoordinates((scrollCoordinates) => {\n      if (!scrollCoordinates) {\n        return null;\n      }\n\n      scrollCoordinates.set(\n        scrollingElement,\n        getScrollCoordinates(scrollingElement)\n      );\n\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n\n  useEffect(() => {\n    const previousElements = prevElements.current;\n\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n\n      const entries = elements\n        .map((element) => {\n          const scrollableElement = getScrollableElement(element);\n\n          if (scrollableElement) {\n            scrollableElement.addEventListener('scroll', handleScroll, {\n              passive: true,\n            });\n\n            return [\n              scrollableElement,\n              getScrollCoordinates(scrollableElement),\n            ] as const;\n          }\n\n          return null;\n        })\n        .filter(\n          (\n            entry\n          ): entry is [\n            HTMLElement | (Window & typeof globalThis),\n            Coordinates\n          ] => entry != null\n        );\n\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n\n      prevElements.current = elements;\n    }\n\n    return () => {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n\n    function cleanup(elements: Element[]) {\n      elements.forEach((element) => {\n        const scrollableElement = getScrollableElement(element);\n\n        scrollableElement?.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n\n  return useMemo(() => {\n    if (elements.length) {\n      return scrollCoordinates\n        ? Array.from(scrollCoordinates.values()).reduce(\n            (acc, coordinates) => add(acc, coordinates),\n            defaultCoordinates\n          )\n        : getScrollOffsets(elements);\n    }\n\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\n","import type {Transform} from '@dnd-kit/utilities';\nimport type {ClientRect} from '../../types';\n\nexport function adjustScale(\n  transform: Transform,\n  rect1: ClientRect | null,\n  rect2: ClientRect | null\n): Transform {\n  return {\n    ...transform,\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1,\n  };\n}\n","import {useMemo} from 'react';\n\nimport type {SensorActivatorFunction, SensorDescriptor} from '../../sensors';\nimport type {\n  SyntheticListener,\n  SyntheticListeners,\n} from './useSyntheticListeners';\n\nexport function useCombineActivators(\n  sensors: SensorDescriptor<any>[],\n  getSyntheticHandler: (\n    handler: SensorActivatorFunction<any>,\n    sensor: SensorDescriptor<any>\n  ) => SyntheticListener['handler']\n): SyntheticListeners {\n  return useMemo(\n    () =>\n      sensors.reduce<SyntheticListeners>((accumulator, sensor) => {\n        const {sensor: Sensor} = sensor;\n\n        const sensorActivators = Sensor.activators.map((activator) => ({\n          eventName: activator.eventName,\n          handler: getSyntheticHandler(activator.handler, sensor),\n        }));\n\n        return [...accumulator, ...sensorActivators];\n      }, []),\n    [sensors, getSyntheticHandler]\n  );\n}\n","import {useEffect} from 'react';\nimport {canUseDOM} from '@dnd-kit/utilities';\n\nimport type {SensorDescriptor} from '../../sensors';\n\nexport function useSensorSetup(sensors: SensorDescriptor<any>[]) {\n  useEffect(\n    () => {\n      if (!canUseDOM) {\n        return;\n      }\n\n      const teardownFns = sensors.map(({sensor}) => sensor.setup?.());\n\n      return () => {\n        for (const teardown of teardownFns) {\n          teardown?.();\n        }\n      };\n    },\n    // TO-DO: Sensors length could theoretically change which would not be a valid dependency\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    sensors.map(({sensor}) => sensor)\n  );\n}\n","import {createContext, useContext, useMemo} from 'react';\nimport {\n  Transform,\n  useNodeRef,\n  useIsomorphicLayoutEffect,\n  useLatestValue,\n  useUniqueId,\n} from '@dnd-kit/utilities';\n\nimport {InternalContext, Data} from '../store';\nimport type {UniqueIdentifier} from '../types';\nimport {ActiveDraggableContext} from '../components/DndContext';\nimport {useSyntheticListeners, SyntheticListenerMap} from './utilities';\n\nexport interface UseDraggableArguments {\n  id: UniqueIdentifier;\n  data?: Data;\n  disabled?: boolean;\n  attributes?: {\n    role?: string;\n    roleDescription?: string;\n    tabIndex?: number;\n  };\n}\n\nexport interface DraggableAttributes {\n  role: string;\n  tabIndex: number;\n  'aria-disabled': boolean;\n  'aria-pressed': boolean | undefined;\n  'aria-roledescription': string;\n  'aria-describedby': string;\n}\n\nexport type DraggableSyntheticListeners = SyntheticListenerMap | undefined;\n\nconst NullContext = createContext<any>(null);\n\nconst defaultRole = 'button';\n\nconst ID_PREFIX = 'Draggable';\n\nexport function useDraggable({\n  id,\n  data,\n  disabled = false,\n  attributes,\n}: UseDraggableArguments) {\n  const key = useUniqueId(ID_PREFIX);\n  const {\n    activators,\n    activatorEvent,\n    active,\n    activeNodeRect,\n    ariaDescribedById,\n    draggableNodes,\n    over,\n  } = useContext(InternalContext);\n  const {\n    role = defaultRole,\n    roleDescription = 'draggable',\n    tabIndex = 0,\n  } = attributes ?? {};\n  const isDragging = active?.id === id;\n  const transform: Transform | null = useContext(\n    isDragging ? ActiveDraggableContext : NullContext\n  );\n  const [node, setNodeRef] = useNodeRef();\n  const [activatorNode, setActivatorNodeRef] = useNodeRef();\n  const listeners = useSyntheticListeners(activators, id);\n  const dataRef = useLatestValue(data);\n\n  useIsomorphicLayoutEffect(\n    () => {\n      draggableNodes.set(id, {id, key, node, activatorNode, data: dataRef});\n\n      return () => {\n        const node = draggableNodes.get(id);\n\n        if (node && node.key === key) {\n          draggableNodes.delete(id);\n        }\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [draggableNodes, id]\n  );\n\n  const memoizedAttributes: DraggableAttributes = useMemo(\n    () => ({\n      role,\n      tabIndex,\n      'aria-disabled': disabled,\n      'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n      'aria-roledescription': roleDescription,\n      'aria-describedby': ariaDescribedById.draggable,\n    }),\n    [\n      disabled,\n      role,\n      tabIndex,\n      isDragging,\n      roleDescription,\n      ariaDescribedById.draggable,\n    ]\n  );\n\n  return {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes: memoizedAttributes,\n    isDragging,\n    listeners: disabled ? undefined : listeners,\n    node,\n    over,\n    setNodeRef,\n    setActivatorNodeRef,\n    transform,\n  };\n}\n","import {useMemo} from 'react';\n\nimport type {SyntheticEventName, UniqueIdentifier} from '../../types';\n\nexport type SyntheticListener = {\n  eventName: SyntheticEventName;\n  handler: (event: React.SyntheticEvent, id: UniqueIdentifier) => void;\n};\n\nexport type SyntheticListeners = SyntheticListener[];\n\nexport type SyntheticListenerMap = Record<string, Function>;\n\nexport function useSyntheticListeners(\n  listeners: SyntheticListeners,\n  id: UniqueIdentifier\n): SyntheticListenerMap {\n  return useMemo(() => {\n    return listeners.reduce<SyntheticListenerMap>(\n      (acc, {eventName, handler}) => {\n        acc[eventName] = (event: React.SyntheticEvent) => {\n          handler(event, id);\n        };\n\n        return acc;\n      },\n      {} as SyntheticListenerMap\n    );\n  }, [listeners, id]);\n}\n","import {useCallback, useContext, useEffect, useRef} from 'react';\nimport {useLatestValue, useNodeRef, useUniqueId} from '@dnd-kit/utilities';\n\nimport {InternalContext, Action, Data} from '../store';\nimport type {ClientRect, UniqueIdentifier} from '../types';\n\nimport {useResizeObserver} from './utilities';\n\ninterface ResizeObserverConfig {\n  /** Whether the ResizeObserver should be disabled entirely */\n  disabled?: boolean;\n  /** Resize events may affect the layout and position of other droppable containers.\n   * Specify an array of `UniqueIdentifier` of droppable containers that should also be re-measured\n   * when this droppable container resizes. Specifying an empty array re-measures all droppable containers.\n   */\n  updateMeasurementsFor?: UniqueIdentifier[];\n  /** Represents the debounce timeout between when resize events are observed and when elements are re-measured */\n  timeout?: number;\n}\n\nexport interface UseDroppableArguments {\n  id: UniqueIdentifier;\n  disabled?: boolean;\n  data?: Data;\n  resizeObserverConfig?: ResizeObserverConfig;\n}\n\nconst ID_PREFIX = 'Droppable';\n\nconst defaultResizeObserverConfig = {\n  timeout: 25,\n};\n\nexport function useDroppable({\n  data,\n  disabled = false,\n  id,\n  resizeObserverConfig,\n}: UseDroppableArguments) {\n  const key = useUniqueId(ID_PREFIX);\n  const {active, dispatch, over, measureDroppableContainers} =\n    useContext(InternalContext);\n  const previous = useRef({disabled});\n  const resizeObserverConnected = useRef(false);\n  const rect = useRef<ClientRect | null>(null);\n  const callbackId = useRef<NodeJS.Timeout | null>(null);\n  const {\n    disabled: resizeObserverDisabled,\n    updateMeasurementsFor,\n    timeout: resizeObserverTimeout,\n  } = {\n    ...defaultResizeObserverConfig,\n    ...resizeObserverConfig,\n  };\n  const ids = useLatestValue(updateMeasurementsFor ?? id);\n  const handleResize = useCallback(\n    () => {\n      if (!resizeObserverConnected.current) {\n        // ResizeObserver invokes the `handleResize` callback as soon as `observe` is called,\n        // assuming the element is rendered and displayed.\n        resizeObserverConnected.current = true;\n        return;\n      }\n\n      if (callbackId.current != null) {\n        clearTimeout(callbackId.current);\n      }\n\n      callbackId.current = setTimeout(() => {\n        measureDroppableContainers(\n          Array.isArray(ids.current) ? ids.current : [ids.current]\n        );\n        callbackId.current = null;\n      }, resizeObserverTimeout);\n    },\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n    [resizeObserverTimeout]\n  );\n  const resizeObserver = useResizeObserver({\n    callback: handleResize,\n    disabled: resizeObserverDisabled || !active,\n  });\n  const handleNodeChange = useCallback(\n    (newElement: HTMLElement | null, previousElement: HTMLElement | null) => {\n      if (!resizeObserver) {\n        return;\n      }\n\n      if (previousElement) {\n        resizeObserver.unobserve(previousElement);\n        resizeObserverConnected.current = false;\n      }\n\n      if (newElement) {\n        resizeObserver.observe(newElement);\n      }\n    },\n    [resizeObserver]\n  );\n  const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);\n  const dataRef = useLatestValue(data);\n\n  useEffect(() => {\n    if (!resizeObserver || !nodeRef.current) {\n      return;\n    }\n\n    resizeObserver.disconnect();\n    resizeObserverConnected.current = false;\n    resizeObserver.observe(nodeRef.current);\n  }, [nodeRef, resizeObserver]);\n\n  useEffect(\n    () => {\n      dispatch({\n        type: Action.RegisterDroppable,\n        element: {\n          id,\n          key,\n          disabled,\n          node: nodeRef,\n          rect,\n          data: dataRef,\n        },\n      });\n\n      return () =>\n        dispatch({\n          type: Action.UnregisterDroppable,\n          key,\n          id,\n        });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [id]\n  );\n\n  useEffect(() => {\n    if (disabled !== previous.current.disabled) {\n      dispatch({\n        type: Action.SetDroppableDisabled,\n        id,\n        key,\n        disabled,\n      });\n\n      previous.current.disabled = disabled;\n    }\n  }, [id, key, disabled, dispatch]);\n\n  return {\n    active,\n    rect,\n    isOver: over?.id === id,\n    node: nodeRef,\n    over,\n    setNodeRef,\n  };\n}\n"],"names":["_extends","Object","assign","bind","n","e","arguments","length","t","r","hasOwnProperty","call","apply","_assertThisInitialized","ReferenceError","_setPrototypeOf","setPrototypeOf","__proto__","_inheritsLoose","o","prototype","create","constructor","safeIsNaN","Number","isNaN","value","areInputsEqual","newInputs","lastInputs","i","first","second","resultFn","isEqual","lastThis","lastResult","lastArgs","calledOnce","newArgs","_i","this","now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","requestAnimationFrame","tick","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","defaultItemKey$1","index","data","createListComponent","_ref","_class","getItemOffset","getEstimatedTotalSize","getItemSize","getOffsetForIndexAndAlignment","getStartIndexForOffset","getStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","_PureComponent","List","props","_this","_instanceProps","_outerRef","_resetIsScrollingTimeoutId","state","instance","isScrolling","scrollDirection","scrollOffset","initialScrollOffset","scrollUpdateWasRequested","_callOnItemsRendered","memoizeOne","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","_this$props","itemSize","layout","itemStyleCache","_getItemStyleCache","_offset","isHorizontal","isRtl","offsetHorizontal","position","left","undefined","right","top","_","__","___","_onScrollHorizontal","event","_event$currentTarget","currentTarget","scrollWidth","setState","prevState","Math","max","min","_resetIsScrollingDebounced","_onScrollVertical","_event$currentTarget2","clientHeight","scrollHeight","scrollTop","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","getDerivedStateFromProps","nextProps","validateSharedProps$1","_proto","scrollTo","scrollToItem","align","_this$props2","itemCount","scrollbarSize","componentDidMount","_this$props3","_callPropsCallbacks","componentDidUpdate","_this$props4","_this$state","componentWillUnmount","render","_this$props5","children","className","innerRef","innerElementType","innerTagName","itemData","_this$props5$itemKey","itemKey","outerElementType","outerTagName","useIsScrolling","_this$_getRangeToRend","_getRangeToRender","startIndex","stopIndex","items","_index","push","key","estimatedTotalSize","WebkitOverflowScrolling","willChange","pointerEvents","_this$_getRangeToRend2","_overscanStartIndex","_overscanStopIndex","_visibleStartIndex","_visibleStopIndex","_this$state2","_scrollDirection","_scrollOffset","_scrollUpdateWasRequested","_this$props6","overscanCount","_this$state3","overscanBackward","overscanForward","PureComponent","defaultProps","_ref2","_ref3","FixedSizeList","_ref4","instanceProps","lastItemOffset","maxOffset","minOffset","middleOffset","round","ceil","floor","_ref5","offset","_ref6","numVisibleItems","_ref7","canUseDOM","window","isWindow","element","elementString","toString","isNode","node","getWindow","target","_target$ownerDocument","_target$ownerDocument2","ownerDocument","defaultView","isDocument","Document","isHTMLElement","HTMLElement","isSVGElement","SVGElement","getOwnerDocument","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","useEvent","handler","handlerRef","useRef","useCallback","args","Array","_len","_key","useLatestValue","dependencies","valueRef","useLazyMemo","useMemo","newValue","useNodeRef","onChange","onChangeHandler","setNodeRef","usePrevious","ids","useUniqueId","prefix","createAdjustmentFn","modifier","object","adjustments","reduce","accumulator","adjustment","entries","valueAdjustment","_objectSpread","add","subtract","isKeyboardEvent","KeyboardEvent","getEventCoordinates","TouchEvent","isTouchEvent","touches","clientX","x","clientY","y","changedTouches","hasViewportRelativeCoordinates","SELECTOR","findFirstFocusableNode","matches","querySelector","hiddenStyles","display","HiddenText","React","LiveRegion","announcement","ariaLiveType","margin","border","padding","clip","clipPath","whiteSpace","role","DndMonitorContext","createContext","defaultScreenReaderInstructions","draggable","defaultAnnouncements","onDragStart","active","onDragOver","over","onDragEnd","onDragCancel","Accessibility","announcements","container","hiddenTextDescribedById","screenReaderInstructions","announce","setAnnouncement","useState","useAnnouncement","liveRegionId","mounted","setMounted","listener","registerListener","useContext","Error","useDndMonitor","onDragMove","markup","createPortal","Action","noop","defaultCoordinates","freeze","sortCollisionsDesc","a","b","getIntersectionRatio","entry","bottom","targetArea","entryArea","intersectionArea","toFixed","rectIntersection","collisionRect","droppableRects","droppableContainers","collisions","droppableContainer","rect","get","intersectionRatio","sort","getRectDelta","rect1","rect2","createRectAdjustmentFn","acc","getAdjustedRect","parseTransform","transform","startsWith","transformArray","slice","split","scaleX","scaleY","defaultOptions","ignoreTransform","getClientRect","options","getBoundingClientRect","transformOrigin","getComputedStyle","parsedTransform","translateX","translateY","parseFloat","indexOf","w","h","inverseTransform","getTransformAgnosticClientRect","getScrollableAncestors","limit","scrollParents","findScrollableAncestors","scrollingElement","includes","computedStyle","overflowRegex","some","property","test","isScrollable","isFixed","parentNode","getFirstScrollableAncestor","firstScrollableAncestor","getScrollableElement","getScrollXCoordinate","scrollX","getScrollYCoordinate","scrollY","getScrollCoordinates","Direction","isDocumentScrollingElement","getScrollPosition","scrollingContainer","minScroll","dimensions","innerHeight","innerWidth","maxScroll","isTop","isLeft","isBottom","isRight","defaultThreshold","getScrollDirectionAndSpeed","scrollContainer","scrollContainerRect","acceleration","thresholdPercentage","speed","threshold","Backward","abs","Forward","getScrollElementRect","getScrollOffsets","scrollableAncestors","scrollIntoViewIfNeeded","measure","scrollIntoView","block","inline","properties","Rect","scrollOffsets","axis","keys","getScrollOffset","defineProperty","currentOffsets","scrollOffsetsDeltla","enumerable","Listeners","listeners","removeAll","forEach","_this$target","removeEventListener","eventName","_this$target2","addEventListener","hasExceededDistance","delta","measurement","dx","dy","sqrt","EventName","KeyboardCode","preventDefault","stopPropagation","defaultKeyboardCodes","Space","Enter","cancel","Esc","end","Tab","defaultKeyboardCoordinateGetter","currentCoordinates","code","Right","Left","Down","Up","KeyboardSensor","autoScrollEnabled","referenceCoordinates","windowListeners","handleKeyDown","handleCancel","attach","handleStart","Resize","VisibilityChange","setTimeout","Keydown","activeNode","onStart","context","keyboardCodes","coordinateGetter","scrollBehavior","handleEnd","newCoordinates","coordinatesDelta","scrollDelta","scrollElementRect","clampedCoordinates","canScrollX","canScrollY","newScrollCoordinates","canScrollToNewCoordinates","behavior","scrollBy","handleMove","coordinates","onMove","onEnd","detach","onCancel","isDistanceConstraint","constraint","Boolean","isDelayConstraint","activators","onActivation","nativeEvent","activator","activatorNode","AbstractPointerSensor","events","listenerTarget","EventTarget","getEventListenerTarget","activated","initialCoordinates","timeoutId","documentListeners","_getEventCoordinates","handleKeydown","removeTextSelection","activationConstraint","bypassActivationConstraint","move","name","passive","DragStart","ContextMenu","handlePending","clearTimeout","onPending","Click","capture","SelectionChange","_getEventCoordinates2","tolerance","distance","cancelable","onAbort","_this$document$getSel","getSelection","removeAllRanges","PointerSensor","super","isPrimary","button","events$1","MouseButton","RightClick","events$2","AutoScrollActivator","TraversalOrder","useAutoScroller","Pointer","canScroll","draggingRect","enabled","interval","order","TreeOrder","pointerCoordinates","scrollableAncestorRects","scrollIntent","disabled","previousDelta","previousIntent","defaultScrollIntent","sign","useScrollIntent","setAutoScrollInterval","clearAutoScrollInterval","intervalRef","duration","setInterval","clearInterval","useInterval","scrollSpeed","DraggableRect","scrollContainerRef","autoScroll","sortedScrollableAncestors","reverse","JSON","stringify","setup","MeasuringStrategy","MeasuringFrequency","defaultValue","Map","useInitialValue","computeFn","previousValue","useResizeObserver","handleResize","resizeObserver","ResizeObserver","disconnect","defaultMeasure","useRect","fallbackRect","setRect","measureRect","currentRect","isConnected","newRect","mutationObserver","handleMutations","MutationObserver","useMutationObserver","records","record","type","contains","observe","childList","subtree","defaultValue$1","useScrollOffsetsDelta","initialScrollOffsets","hasScrollOffsets","useWindowRect","getWindowClientRect","defaultValue$2","getMeasurableNode","firstChild","defaultSensors","sensor","defaultData","defaultMeasuringConfiguration","droppable","strategy","WhileDragging","frequency","Optimized","dragOverlay","DroppableContainersMap","_super$get","toArray","from","values","getEnabled","filter","getNodeFor","_this$get$node$curren","_this$get","defaultPublicContext","activatorEvent","activeNodeRect","containerNodeRect","draggableNodes","nodeRef","setRef","measuringConfiguration","measureDroppableContainers","windowRect","measuringScheduled","defaultInternalContext","ariaDescribedById","dispatch","InternalContext","PublicContext","getInitialState","nodes","translate","containers","reducer","action","DragMove","DragEnd","DragCancel","RegisterDroppable","set","SetDroppableDisabled","UnregisterDroppable","delete","RestoreFocus","previousActivatorEvent","previousActiveId","activeElement","draggableNode","focusableNode","focus","applyModifiers","modifiers","_objectWithoutProperties","ActiveDraggableContext","Status","DndContext","memo","accessibility","sensors","collisionDetection","measuring","store","useReducer","dispatchMonitorEvent","registerMonitorListener","Set","_listener$type","useDndMonitorProvider","status","setStatus","Uninitialized","isInitialized","Initialized","activeId","activeRects","initial","translated","_node$data","activeRef","activeSensor","setActiveSensor","setActivatorEvent","latestProps","draggableDescribedById","enabledDroppableContainers","config","dragging","queue","setQueue","containersRef","Always","BeforeDragging","isDisabled","disabledRef","concat","map","useDroppableMeasuring","cachedNode","useCachedNode","activationCoordinates","autoScrollOptions","activeSensorDisablesAutoscroll","autoScrollGloballyDisabled","getAutoScrollerOptions","initialActiveNodeRect","useInitialRect","initialRect","initialized","rectDelta","useLayoutShiftScrollCompensation","layoutShiftCompensation","parentElement","sensorContext","draggingNode","draggingNodeRect","scrollAdjustedTranslate","overNode","_sensorContext$curren","handleNodeChange","useDragOverlayMeasuring","_dragOverlay$nodeRef$","_dragOverlay$rect","usesDragOverlay","nodeRectDelta","previousNode","ancestors","useScrollableAncestors","elements","firstElement","rects","setRects","measureRects","useRects","modifiedTranslate","overlayNodeRect","scrollCoordinates","setScrollCoordinates","prevElements","handleScroll","previousElements","cleanup","scrollableElement","useScrollOffsets","scrollAdjustment","activeNodeScrollDelta","overId","firstCollision","getFirstCollision","setOver","adjustScale","_over$rect","activeSensorRef","instantiateSensor","Sensor","sensorInstance","onDragAbort","onDragPending","unstable_batchedUpdates","Initializing","createHandler","async","cancelDrop","Promise","resolve","bindActivatorToSensorInstantiator","activeDraggableNode","dndKit","defaultPrevented","activationContext","capturedBy","getSyntheticHandler","useCombineActivators","teardownFns","teardown","useSensorSetup","overContainer","publicContext","internalContext","Provider","restoreFocus","NullContext","defaultRole","ID_PREFIX","useDraggable","attributes","roleDescription","tabIndex","isDragging","setActivatorNodeRef","useSyntheticListeners","dataRef","ID_PREFIX$1","defaultResizeObserverConfig","timeout","useDroppable","resizeObserverConfig","previous","resizeObserverConnected","callbackId","resizeObserverDisabled","updateMeasurementsFor","resizeObserverTimeout","isArray","newElement","previousElement","unobserve","isOver"],"sourceRoot":""}